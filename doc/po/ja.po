# ja.po for test-unit Reference.
# Copyright (C) 2011 Kouhei Sutou
# This file is distributed under the same license as the test-unit package.
# Kouhei Sutou <kou@cozmixng.org>, 2011.
msgid ""
msgstr ""
"Project-Id-Version: test-unit 2.3.1\n"
"PO-Revision-Date: 2017-03-31 17:13+0900\n"
"Last-Translator: Kouhei Sutou <kou@cozmixng.org>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid "# test-unit"
msgstr ""

msgid ""
"[![](https://badge.fury.io/rb/test-unit.svg)](http://badge.fury.io/rb/test-uni"
"t)\n"
"[![](https://travis-ci.org/test-unit/test-unit.svg?branch=master)](https://tra"
"vis-ci.org/test-unit/test-unit)"
msgstr ""

msgid ""
"* https://test-unit.github.io/\n"
"* https://github.com/test-unit/test-unit"
msgstr ""

msgid "## Description"
msgstr "## 説明"

msgid "An xUnit family unit testing framework for Ruby."
msgstr ""

msgid ""
"test-unit (Test::Unit) is unit testing framework for Ruby, based on xUnit\n"
"principles. These were originally designed by Kent Beck, creator of extreme\n"
"programming software development methodology, for Smalltalk's SUnit. It allows"
"\n"
"writing tests, checking results and automated testing in Ruby."
msgstr ""

msgid "## Features"
msgstr ""

msgid ""
"* test-unit 1.2.3 is the original test-unit, taken\n"
"  straight from the ruby distribution. It is being\n"
"  distributed as a gem to allow tool builders to use it as a\n"
"  stand-alone package. (The test framework in ruby is going\n"
"  to radically change very soon)."
msgstr ""

msgid ""
"* test-unit will be improved actively and may break\n"
"  compatiblity with test-unit 1.2.3. (We will not hope it\n"
"  if it isn't needed.)"
msgstr ""

msgid ""
"* Some features exist as separated gems like GUI test\n"
"  runner. (Tk, GTK+ and Fox) test-unit-full gem package\n"
"  provides for installing all test-unit related gems\n"
"  easily."
msgstr ""

msgid "## How To"
msgstr "## 一歩進んだ使い方"

msgid ""
"* [How To](https://github.com/test-unit/test-unit/blob/master/doc/text/how-to."
"md) (link for GitHub)\n"
"* {file:doc/text/how-to.md How To} (link for YARD)"
msgstr ""

msgid "## Install"
msgstr "## インストール"

msgid ""
"<pre>\n"
"% sudo gem install test-unit\n"
"</pre>"
msgstr ""

msgid "If you want to use full test-unit features:"
msgstr ""

msgid ""
"<pre>\n"
"% sudo gem install test-unit-full\n"
"</pre>"
msgstr ""

msgid "## License"
msgstr ""

msgid "(The Ruby License)"
msgstr ""

msgid "This software is distributed under the same terms as ruby."
msgstr ""

msgid "Exception:"
msgstr ""

msgid ""
"  * lib/test/unit/diff.rb is a triple license of the Ruby license,\n"
"    PSF license and LGPLv2.1 or later."
msgstr ""

msgid ""
"  * lib/test-unit.rb is a dual license of the Ruby license and LGPLv2.1\n"
"    or later."
msgstr ""

msgid "## Authors"
msgstr ""

msgid "### Active"
msgstr ""

msgid ""
"* Kouhei Sutou: The current maintainer\n"
"* Haruka Yoshihara: Data driven test supports."
msgstr ""

msgid "### Inactive"
msgstr ""

msgid ""
"* Nathaniel Talbott: The original author\n"
"* Ryan Davis: The second maintainer"
msgstr ""

msgid "### Images"
msgstr ""

msgid "* Mayu & Co.: kinotan icons"
msgstr ""

msgid "## Thanks"
msgstr "## 感謝"

msgid ""
"* Daniel Berger: Suggestions and bug reports.\n"
"* Designing Patterns: Suggestions.\n"
"* Erik Hollensbe: Suggestions and bug reports.\n"
"* Bill Lear: A suggestion.\n"
"* Diego Pettenò: A bug report.\n"
"* Angelo Lakra: A bug report.\n"
"* Mike Pomraning: A bug report.\n"
"* David MARCHALAND: Suggestions and bug reports.\n"
"* Andrew Grimm: A bug report.\n"
"* Champak Ch: A bug report.\n"
"* Florian Frank: A bug report.\n"
"* grafi-tt: Bug fixes and reports.\n"
"* Jeremy Stephens: A bug report.\n"
"* Hans de Graaff: Bug reports.\n"
"* James Mead: A bug report.\n"
"* Marc Seeger (Acquia): A bug report.\n"
"* boutil: A bug report.\n"
"* Vladislav Rassokhin: A bug report."
msgstr ""

msgid "## 1. First step of the `test-unit`"
msgstr "## 1. `test-unit`はじめの一歩"

msgid "Let's getting start `test-unit`."
msgstr "テストユニットを使ってみましょう。"

msgid ""
"This document creates an example gem package called `sample` with the `test-un"
"it` testing framework."
msgstr "この文書は`sample`というgemパッケージを作成し`test-unit`を利用する方法について解説します。"

msgid "## 2. Install bundler and test-unit."
msgstr "## 2. bundlerとtest-unitのインストール"

msgid ""
"* First, install the `bundler` gem for generating gem template.\n"
"* Second, install the `test-unit` itself."
msgstr ""
"* 最初にgemの雛形を生成する`bundler`をインストールします。\n"
"* 次に、`test-unit`をインストールします。"

msgid ""
"~~~\n"
"!!!plain\n"
"gem install bundler\n"
"gem install test-unit\n"
"~~~"
msgstr ""

msgid ""
"The `gem list` command output installed packages.\n"
"You will find the following lines."
msgstr ""
"`gem list`コマンドでインストールしたパッケージを確認します。\n"
"インストールが成功すると、次のような行が出力されます。"

msgid ""
"~~~\n"
"!!!plain\n"
"gem list\n"
"...\n"
"bundler (1.14.6)\n"
"...\n"
"test-unit (3.2.3)\n"
"~~~"
msgstr ""

msgid "## 3. Create gem template."
msgstr "## 3. gemテンプレートの作成"

msgid ""
"Next, create a gem template using `bundler` command.\n"
"This command generates package skeleton with a testing framework.\n"
"However, this command can't generate test templates for `test-unit`."
msgstr ""
"次に`bundler`コマンドを使ってgemの雛形を作成します。\n"
"このコマンドはテストに必要な雛形も生成することができますが、\n"
"現在は、`test-unit`のためのテンプレートを生成することはできません。"

msgid ""
"So, First create gem template with the `minitest` testing framework.\n"
"(It's similar to `unit-test`).\n"
"After that, replace some files for `test-unit`."
msgstr ""
"そのため、まず`minitest`というテストフレームワークのテンプレートを作成し\n"
"(このフレームワークは`unit-test`に似ています。)\n"
"その後いくつかのファイルを`test-unit`用に修正します。"

msgid "The `bundle gem -t minitest sample` command will generate the following files."
msgstr "`bundle gem -t minitest sample`を実行すると次のファイルを生成します。"

msgid ""
"~~~\n"
"!!!plain\n"
".\n"
"|-- Gemfile\n"
"|-- README.md\n"
"|-- Rakefile\n"
"|-- bin\n"
"|   |-- console\n"
"|   `-- setup\n"
"|-- lib\n"
"|   |-- sample\n"
"|   |   `-- version.rb\n"
"|   `-- sample.rb\n"
"|-- sample.gemspec  # <- Modify\n"
"`-- test\n"
"    |-- sample_test.rb # <- Modify\n"
"    `-- test_helper.rb # <- Modify\n"
"~~~"
msgstr ""
"~~~\n"
"!!!plain\n"
".\n"
"|-- Gemfile\n"
"|-- README.md\n"
"|-- Rakefile\n"
"|-- bin\n"
"|   |-- console\n"
"|   `-- setup\n"
"|-- lib\n"
"|   |-- sample\n"
"|   |   `-- version.rb\n"
"|   `-- sample.rb\n"
"|-- sample.gemspec  # <- 修正\n"
"`-- test\n"
"    |-- sample_test.rb # <- 修正\n"
"    `-- test_helper.rb # <- 修正\n"
"~~~"

msgid "## 4. Edit files for `test-unit`"
msgstr "## 4. `test-unit`用にファイルを修正する"

msgid "### 4.1. Edit gemspec"
msgstr "### 4.1 gemspecの編集"

msgid ""
"Edit `sample.gemspec` like the below.\n"
"Replace `minitest` line to `test-unit`."
msgstr ""
"`sample.gemspec`ファイルを次のように修正します。\n"
"`minitest`の行を、`test-unit`に修正します。"

msgid "Before"
msgstr "修正前"

msgid ""
"~~~\n"
"!!!ruby\n"
"  spec.add_development_dependency \"minitest\", \"~> 5.0\"\n"
"~~~"
msgstr ""

msgid "After"
msgstr "修正後"

msgid ""
"~~~\n"
"!!!ruby\n"
"  spec.add_development_dependency \"test-unit\", \"~> 3.2.3\"\n"
"~~~"
msgstr ""

msgid "### 4.2. Edit `test/test_helper.rb`"
msgstr "### 4.2 `test/test_helper.rb`の修正"

msgid "Next, edit the `test/test_helper.rb` file."
msgstr "次に`test/test_helper`ファイルを修正します。"

msgid ""
"~~~\n"
"!!!ruby\n"
"$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)\n"
"require 'sample'"
msgstr ""

msgid ""
"require 'minitest/autorun' # <-- Modify this line.\n"
"~~~"
msgstr ""
"require 'minitest/autorun' # <-- この行を修正します。\n"
"~~~"

msgid ""
"require 'test/unit' # <-- After modification.\n"
"~~~"
msgstr ""
"require 'test/unit' # <-- 修正後\n"
"~~~"

msgid "### 4.3 Rakefile (No edit)"
msgstr "### 4.3 Rakefile(修正不要)"

msgid ""
"This file doesn't need to modify.\n"
"The output is the below."
msgstr ""
"このファイルは修正不要です。\n"
"ファイルの中身は次のようになっています。"

msgid ""
"~~~\n"
"!!!ruby\n"
"require \"bundler/gem_tasks\"\n"
"require \"rake/testtask\""
msgstr ""

msgid ""
"Rake::TestTask.new(:test) do |t|\n"
"  t.libs << \"test\"\n"
"  t.libs << \"lib\"\n"
"  t.test_files = FileList['test/**/*_test.rb']\n"
"end"
msgstr ""
"Rake::TestTask.new(:test) do |t|\n"
"  t.libs << \"test\"\n"
"  t.libs << \"lib\"\n"
"  t.test_files = FileList['test/**/*_test.rb']\n"
"end"

msgid ""
"task :default => :test\n"
"~~~"
msgstr ""

msgid "### 4.4 Edit `test/sample_test.rb`"
msgstr "### 4.4 `test/sample_test.rb`の修正"

msgid ""
"The bundler generate the file `test/sample_test.rb`.\n"
"This file originally templates for `minitest`."
msgstr ""
"bundlerコマンドは、`test/sample_test.rb`を作成します。\n"
"このファイルは`minitest`用のテンプレートになっています。"

msgid "Let's modify this file for `test-unit`"
msgstr "`test-unit`用に修正します"

msgid "before"
msgstr "修正前"

msgid ""
"~~~\n"
"!!!ruby\n"
"require 'test_helper'"
msgstr ""

msgid ""
"class SampleTest < Minitest::Test # <- Modify here\n"
"  def test_that_it_has_a_version_number\n"
"    refute_nil ::Sample::VERSION\n"
"  end"
msgstr ""
"class SampleTest < Minitest::Test # <- ここを修正します\n"
"  def test_that_it_has_a_version_number\n"
"    refute_nil ::Sample::VERSION\n"
"  end"

msgid ""
"  def test_it_does_something_useful\n"
"    assert false\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid ""
"class SampleTest < Test::Unit::TestCase # <- After modification\n"
"  def test_that_it_has_a_version_number\n"
"    refute_nil ::Sample::VERSION\n"
"  end"
msgstr ""
"class SampleTest < Test::Unit::TestCase # <- 修正後\n"
"  def test_that_it_has_a_version_number\n"
"    refute_nil ::Sample::VERSION\n"
"  end"

msgid "## 5. Execute test."
msgstr "## 5. テストの実行"

msgid ""
"The `rake test` command execute test scenarios in the `test` directory.\n"
"Now it tries to two tests. One will success the other one fails."
msgstr ""
"`rake test`コマンドを実行すると`test`ディレクトリの下にあるテストを実行します。\n"
"二つのテストを実行し、一つは成功、もう一つは失敗します。"

msgid ""
"~~~\n"
"!!!plain\n"
"rake test\n"
"Loaded suite\n"
"/path/to/ruby/lib/ruby/gems/2.3.0/gems/rake-12.0.0/lib/rake/rake_test_loader\n"
"Started\n"
"F\n"
"=============================================================================="
"==\n"
"Failure: <false> is not true.\n"
"test_it_does_something_useful(SampleTest)\n"
"/path/to/sample/test/sample_test.rb:9:in `test_it_does_something_useful'\n"
"      6:   end\n"
"      7:\n"
"      8:   def test_it_does_something_useful\n"
"  =>  9:     assert false\n"
"     10:   end\n"
"     11: end\n"
"=============================================================================="
"==\n"
"."
msgstr ""

msgid ""
"Finished in 0.011521 seconds.\n"
"------------------------------------------------------------------------------"
"--\n"
"2 tests, 2 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifi"
"cations\n"
"50% passed\n"
"------------------------------------------------------------------------------"
"--\n"
"173.60 tests/s, 173.60 assertions/s\n"
"rake aborted!\n"
"Command failed with status (1)"
msgstr ""

msgid ""
"Tasks: TOP => test\n"
"(See full trace by running task with --trace)\n"
"~~~"
msgstr ""

msgid "## 6. Create original tests."
msgstr "## 6. オリジナルのテストを作る"

msgid "Let's create your original tests with the following rules."
msgstr "次のルールに従ってオリジナルのテストを作成します。"

msgid ""
"* Create a test file in the `test` directory.\n"
"* The file needs suffix  `xxx_test.rb`.\n"
"* You can put test file into the subdirectory like `test/sub`."
msgstr ""
"* `test`ディレクトリの下にテストを作成します。\n"
"* ファイルの名前は、xxx_test.rbのようにします。\n"
"* テストは`sub/test`のようなサブディレクトリに置くこともできます。"

msgid "Example directory layout."
msgstr "ディレクトリレイアウトの例"

msgid ""
"~~~\n"
"!!!plain\n"
"test\n"
"|-- sample_test.rb\n"
"|-- sub\n"
"|   `-- sample2_test.rb\n"
"`-- test_helper.rb\n"
"~~~"
msgstr ""

msgid "Example test file in the sub directory."
msgstr "サブディレクトリ内のテスト例"

msgid ""
"module Sub\n"
"  class Sample2Test < Test::Unit::TestCase\n"
"    def test_that_it_has_a_version_number\n"
"      refute_nil ::Sample::VERSION\n"
"    end"
msgstr ""
"module Sub\n"
"  class Sample2Test < Test::Unit::TestCase\n"
"    def test_that_it_has_a_version_number\n"
"      refute_nil ::Sample::VERSION\n"
"    end"

msgid ""
"    def test_it_does_something_useful\n"
"      assert false\n"
"    end\n"
"  end\n"
"end\n"
"~~~"
msgstr ""

msgid "## 7. For more information"
msgstr "## 7. 詳細な情報"

msgid "Let's read the official document."
msgstr "公式のドキュメントを参照してください。"

msgid "* [test-unit](https://test-unit.github.io/index.html)"
msgstr "* [test-unit](https://test-unit.github.io/index.html)"

msgid "# How To"
msgstr "# 一歩進んだ使い方"

msgid "## Run all tests"
msgstr "## すべてのテストを実行する"

msgid ""
"To make it easy to run all your tests, you can add a `run_test.rb` script\n"
"to your `test` directory. A simple example might look like:"
msgstr "すべてのテストを簡単に実行するために、 `run_test.rb` スクリプトを `test` ディレクトリにおきます。スクリプトは以下のようにします。"

msgid ""
"    base_dir = File.expand_path(File.join(File.dirname(__FILE__), \"..\"))\n"
"    lib_dir  = File.join(base_dir, \"lib\")\n"
"    test_dir = File.join(base_dir, \"test\")"
msgstr ""

msgid "    $LOAD_PATH.unshift(lib_dir)"
msgstr ""

# Test::Unit
msgid "    require 'test/unit'"
msgstr ""

msgid "    exit Test::Unit::AutoRunner.run(true, test_dir)"
msgstr ""

msgid "Then it's easy to run tests via the command line with,"
msgstr "これで以下のコマンドで簡単にテストを実行できます。"

msgid "    $ ruby test/run_test.rb"
msgstr ""

msgid "## Change test runner via the command line"
msgstr "## コマンドラインでテストランナーを変更する"

msgid ""
"The output format can be changed via the command line with\n"
"the `--runner` option. Simply tack it to the end:"
msgstr "テスト結果の出力フォーマットはコマンドラインで `--runner` オプションを指定すると変更できます。単純にこのオプションを最後に追加してください。"

msgid "    ruby test/run_test.rb --runner tap"
msgstr ""

msgid "## Configure test-unit per-project"
msgstr "## プロジェクトごとにtest-unitを設定する"

msgid ""
"Test::Unit reads `test-unit.yml` or `.test-unit.yml` in the current working\n"
"directory as Test::Unit's configuration file. It can contain the following\n"
"settings:"
msgstr ""
"Test::Unitは `test-unit.yml` または現在のワーキングディレクトリにある `.test-unit.yml` をTest::Unitの"
"設定ファイルとして読み込みます。このファイルには以下のような設定をすることができます。"

# Test::Unit
msgid ""
"* color scheme definitions\n"
"* test runner to be used\n"
"* test runner options\n"
"* test collector to be used"
msgstr ""

msgid ""
"Except color scheme definitions, all of them can be specified by command\n"
"line option."
msgstr "カラースキーム定義以外はコマンドラインオプションで指定することができます。"

msgid "Here are sample color scheme definitions:"
msgstr "以下はカラースキームの定義例です。"

msgid ""
"    color_schemes:\n"
"      inverted:\n"
"        success:\n"
"          name: red\n"
"          bold: true\n"
"        failure:\n"
"          name: green\n"
"          bold: true\n"
"      other_scheme:\n"
"        ..."
msgstr ""

msgid "Here are the syntax of color scheme definitions:"
msgstr ""

msgid ""
"    color_schemes:\n"
"      SCHEME_NAME:\n"
"        EVENT_NAME:\n"
"          name: COLOR_NAME\n"
"          intensity: BOOLEAN\n"
"          bold: BOOLEAN\n"
"          italic: BOOLEAN\n"
"          underline: BOOLEAN\n"
"        ...\n"
"      ..."
msgstr ""

msgid ""
"| Definition  | Description                  |\n"
"|-------------|------------------------------|\n"
"| SCHEME_NAME | the name of the color scheme |\n"
"| EVENT_NAME  | success, failure, pending, omission, notification, error |\n"
"| COLOR_NAME  | black, red, green, yellow, blue, magenta, cyan, white    |\n"
"| BOOLEAN     | true or false |"
msgstr ""

msgid ""
"You can use the above 'inverted' color scheme with the following configuration"
":"
msgstr "上で定義した'inverted'カラースキムを使う設定は以下の通りです。"

msgid ""
"    runner: console\n"
"    console_options:\n"
"      color_scheme: inverted\n"
"    color_schemes:\n"
"      inverted:\n"
"        success:\n"
"          name: red\n"
"          bold: true\n"
"        failure:\n"
"          name: green\n"
"          bold: true"
msgstr ""

msgid "# News"
msgstr ""

msgid "## 3.3.3 - 2019-05-10 {#version-3-3-3}"
msgstr ""

#, fuzzy
msgid "### Fixed"
msgstr "### 修正"

msgid ""
"  * Fixed a bug that priority mode with test case name that uses\n"
"    special characters such as `?` can't be used on Windows."
msgstr ""

msgid "## 3.3.2 - 2019-04-11 {#version-3-3-2}"
msgstr ""

msgid "### Fixes"
msgstr "### 修正"

msgid ""
"  * Fixed a bug that `Test::Unit::Collector::Load` doesn't load test\n"
"    files under sub directories when these files have the same base\n"
"    name as test files in upper directories.\n"
"    [Reported by Kenta Murata]"
msgstr ""

msgid "### Thanks"
msgstr "### 感謝"

msgid "  * Kenta Murata"
msgstr ""

msgid "## 3.3.1 - 2019-03-27 {#version-3-3-1}"
msgstr ""

msgid "### Improvements"
msgstr "### 改良"

msgid ""
"  * Added support for `Test::Unit::AssertionFailedError#user_message`\n"
"    for not only `assert_equal` and `assert_raise` but also all\n"
"    assertions.\n"
"    [GitHub#162][Reported by xgraffm]"
msgstr ""

msgid "  * xgraffm"
msgstr ""

msgid "## 3.3.0 - 2019-01-23 {#version-3-3-0}"
msgstr ""

msgid ""
"  * Added support for auto test run when all tests are defined in\n"
"    modules."
msgstr ""

msgid ""
"  * Added support for defining methods to test case class in multiple\n"
"    threads.\n"
"    [GitHub#159][Reported by Charles Oliver Nutter]"
msgstr ""

msgid ""
"  * Suppressed warnings on Ruby 2.5.\n"
"    [GitHub#160][Reported by Daniel Berger]"
msgstr ""

msgid "  * Suppressed warnings on Ruby 2.7."
msgstr ""

msgid ""
"  * Fixed a code snippet fetch failure when source code isn't UTF-8\n"
"    and the default external encoding is set to not UTF-8.\n"
"    [GitHub#161][Reported by masa kunikata]"
msgstr ""

msgid "  * Charles Oliver Nutter"
msgstr ""

msgid "  * Daniel Berger"
msgstr ""

msgid "  * masa kunikata"
msgstr ""

msgid "## 3.2.9 - 2018-12-01 {#version-3-2-9}"
msgstr ""

msgid ""
"  * Added support for data generation by method. `data_#{test_name}`\n"
"    is called to generate data for `test_name` test."
msgstr ""

msgid "  * Added support for data matrix generation."
msgstr ""

msgid "    Example:"
msgstr ""

msgid ""
"    ```ruby\n"
"    data(:a, [0, 1, 2])\n"
"    data(:b, [:x, :y])\n"
"    def test_data(data)\n"
"    end\n"
"    ```"
msgstr ""

msgid "    This example generates the following data matrix:"
msgstr ""

msgid ""
"      * label: `\"a: 0, b: :x\"`, data: `{a: 0, b: :x}`\n"
"      * label: `\"a: 0, b: :y\"`, data: `{a: 0, b: :y}`\n"
"      * label: `\"a: 1, b: :x\"`, data: `{a: 1, b: :x}`\n"
"      * label: `\"a: 1, b: :y\"`, data: `{a: 1, b: :y}`\n"
"      * label: `\"a: 2, b: :x\"`, data: `{a: 2, b: :x}`\n"
"      * label: `\"a: 2, b: :y\"`, data: `{a: 2, b: :y}`"
msgstr ""

msgid "  * Added `Test::Unit::TestCase#data` that returns the current data."
msgstr ""

msgid ""
"  * Added support for using test method that doesn't have no\n"
"    parameters as data driven test."
msgstr ""

msgid ""
"    ```ruby\n"
"    data(\"label\", :value)\n"
"    def test_data # Available since this release\n"
"      p data # :value\n"
"    end\n"
"    ```"
msgstr ""

msgid "  * Added support for `:keep` option to `Test::Unit::TestCase.data`."
msgstr ""

msgid ""
"  * Added support for `:group` option to\n"
"    `Test::Unit::TestCase.data`. It's useful to generate multiple data\n"
"    matrix groups."
msgstr ""

msgid ""
"    ```ruby\n"
"    # Group1\n"
"    data(:a, [0, 1, 2], group: :g1)\n"
"    data(:b, [:x, :y], group: :g1)\n"
"    # Group2\n"
"    data(:a, [:x, :y], group: :g2)\n"
"    data(:c, [-1, -2], group: :g2)\n"
"    def test_data(data)\n"
"    end\n"
"    ```"
msgstr ""

msgid ""
"      * label: `\"group: :g1, a: 0, b: :x\"`, data: `{a: 0, b: :x}`\n"
"      * label: `\"group: :g1, a: 0, b: :y\"`, data: `{a: 0, b: :y}`\n"
"      * label: `\"group: :g1, a: 1, b: :x\"`, data: `{a: 1, b: :x}`\n"
"      * label: `\"group: :g1, a: 1, b: :y\"`, data: `{a: 1, b: :y}`\n"
"      * label: `\"group: :g1, a: 2, b: :x\"`, data: `{a: 2, b: :x}`\n"
"      * label: `\"group: :g1, a: 2, b: :y\"`, data: `{a: 2, b: :y}`\n"
"      * label: `\"group: :g2, a: :x, b: -1\"`, data: `{a: :x, b: -1}`\n"
"      * label: `\"group: :g2, a: :x, b: -2\"`, data: `{a: :x, b: -2}`\n"
"      * label: `\"group: :g2, a: :y, b: -1\"`, data: `{a: :y, b: -1}`\n"
"      * label: `\"group: :g2, a: :y, b: -2\"`, data: `{a: :y, b: -2}`"
msgstr ""

msgid "## 3.2.8 - 2018-05-13 {#version-3-2-8}"
msgstr ""

msgid ""
"  * [UI][console]: Changed to put code snippet before backtrace on\n"
"    reverse mode."
msgstr ""

msgid "## 3.2.7 - 2017-12-12 {#version-3-2-7}"
msgstr ""

msgid ""
"  * Added source code link to gemspec.\n"
"    [GitHub#157][Patch by Grey Baker]"
msgstr ""

msgid ""
"  * Changed to use SVG image for badges in README.\n"
"    [GitHub#158][Patch by Olle Jonsson]"
msgstr ""

msgid ""
"  * [UI][console]: Added `--reverse-output` option to output fault\n"
"    details in reverse like Ruby 2.5. It's enabled by default only for\n"
"    tty output."
msgstr ""

msgid ""
"  * Fixed a typo.\n"
"    [GitHub#156][Patch by masa kunikata]"
msgstr ""

msgid "  * [UI][console]: Fixed a bug that broken align in verbose mode."
msgstr ""

msgid "  * Grey Baker"
msgstr ""

msgid "  * Olle Jonsson"
msgstr ""

msgid "## 3.2.6 - 2017-09-21 {#version-3-2-6}"
msgstr ""

msgid ""
"  * Changed test file require failure to error from omission.\n"
"    [GitHub#154][Patch by naofumi-fujii]"
msgstr ""

msgid "  * naofumi-fujii"
msgstr ""

msgid "## 3.2.5 - 2017-06-24 {#version-3-2-5}"
msgstr ""

msgid ""
"  * Supported `--enable-frozen-string-literal` `ruby` option.\n"
"    [GitHub#149][Reported by Pat Allan]"
msgstr ""

msgid "  * Pat Allan"
msgstr ""

msgid "## 3.2.4 - 2017-05-23 {#version-3-2-4}"
msgstr ""

msgid "  * Updated tests for Ruby 2.4. [GitHUb#136][Patch by Kazuki Tsujimoto]"
msgstr ""

msgid "  * Supported power\\_assert 1.0.0. [GitHub#137][Patch by Kazuki Tsujimoto]"
msgstr ""

msgid ""
"  * Added the getting started document.\n"
"    [GitHub#139][GitHub#141][Patch by Hiroyuki Sato]"
msgstr ""

msgid ""
"  * Added the document for `attribute`.\n"
"    [GitHub#143][Patch by Fumiaki MATSUSHIMA]"
msgstr ""

msgid "  * Improved a link for GitHub. [GitHub#144][Patch by rochefort]"
msgstr ""

msgid "  * Updated `.travis.yml`. [GitHub#145][Patch by Jun Aruga]"
msgstr ""

msgid "  * Fixed a contributor name. [GitHub#131][Patch by Akira Matsuda]"
msgstr ""

msgid "  * Fixed typos in document. [GitHub#132][Patch by Akira Matsuda]"
msgstr ""

msgid "  * Fixed typos in document. [GitHub#134][Patch by Yuji Yaginuma]"
msgstr ""

msgid ""
"  * Fixed a bug that data label with \"(\" isn't supported.\n"
"    [GitHub#135][Reported by Kazuki Tsujimoto]"
msgstr ""

msgid ""
"  * Fixed assertion message in English.\n"
"    [GitHub#133][Reported by Khalil Fazal]"
msgstr ""

msgid "  * Fixed a typo in typo fix. [GitHub#138][Patch by kami]"
msgstr ""

msgid ""
"  * Fixed a bug that target location finder may return wrong\n"
"    location. [GitHub#146][Patch by Yuki Ito]"
msgstr ""

msgid ""
"  * Fixed a bug that `--no-show-detail-immediately` raises an error.\n"
"    [GitHub#147][Reported by MSP-Greg]"
msgstr ""

msgid "  * Akira Matsuda"
msgstr ""

msgid "  * Yuji Yaginuma"
msgstr ""

msgid "  * Kazuki Tsujimoto"
msgstr ""

msgid "  * Khalil Fazal"
msgstr ""

msgid "  * kami"
msgstr ""

msgid "  * Hiroyuki Sato"
msgstr ""

msgid "  * Fumiaki MATSUSHIMA"
msgstr ""

msgid "  * rochefort"
msgstr ""

msgid "  * Jun Aruga"
msgstr ""

msgid "  * Yuki Ito"
msgstr ""

msgid "  * MSP-Greg"
msgstr ""

msgid "## 3.2.3 - 2016-11-25 {#version-3-2-3}"
msgstr ""

msgid ""
"  * Fixed a bug that `--order` isn't applied.\n"
"    [GitHub#129][Reported by Vít Ondruch]"
msgstr ""

msgid "  * Vít Ondruch"
msgstr ""

msgid "## 3.2.2 - 2016-11-02 {#version-3-2-2}"
msgstr ""

msgid ""
"  * Improved Travis CI configuration.\n"
"    [GitHub#123][Patch by Ryunosuke Sato]"
msgstr ""

msgid ""
"  * Supported Java native exception.\n"
"    [GitHub#126][Reported by Bob Saveland]"
msgstr ""

msgid "  * doc: Fixed markup. [GitHub#127][Patch by Tomohiro Hashidate]"
msgstr ""

msgid ""
"  * Fixed a bug that `--location=LINE` may not detect a test when\n"
"    fixtures are defined before any tests:"
msgstr ""

msgid ""
"        1 class MyTestCase < Test::Unit::TestCase\n"
"        2   setup do\n"
"        3   end\n"
"        4\n"
"        5   test \"xxx\" do\n"
"        6   end\n"
"        7 end"
msgstr ""

msgid "    `--location=5` couldn't find the `xxx` test."
msgstr ""

msgid "    [Reported by Ryota Sasabe]"
msgstr ""

msgid "  * Ryunosuke Sato"
msgstr ""

msgid "  * Tomohiro Hashidate"
msgstr ""

msgid "  * Bob Saveland"
msgstr ""

msgid "  * Ryota Sasabe"
msgstr ""

msgid "## 3.2.1 - 2016-07-19 {#version-3-2-1}"
msgstr ""

msgid ""
"  * Clarified lib/test/unit/diff.rb license. It's a triple license of\n"
"    the Ruby license, PSF license and LGPLv2.1 or later.\n"
"    [Reported by Luisa Pace]"
msgstr ""

msgid ""
"  * Reported norification when data driven test doesn't have\n"
"    parameter.\n"
"    [GitHub#122][Reported by Satoshi \"Moris\" Tagomori]"
msgstr ""

msgid "  * Luisa Pace"
msgstr ""

msgid "  * Satoshi \"Moris\" Tagomori"
msgstr ""

msgid "## 3.2.0 - 2016-06-12 {#version-3-2-0}"
msgstr ""

msgid ""
"  * Supported rxvt family terminals as color available terminals.\n"
"    [GitHub#121][Reported by Ippei Kishida]"
msgstr ""

msgid "  * Ippei Kishida"
msgstr ""

msgid "## 3.1.9 - 2016-05-20 {#version-3-1-9}"
msgstr ""

msgid ""
"  * Fixed conflict with test-unit-power_assert.\n"
"    [GitHub#120][Patch by Kazuki Tsujimoto]"
msgstr ""

msgid "  * Fixed a bug that path in `$LOAD_PATH` may be removed."
msgstr ""

msgid "## 3.1.8 - 2016-03-19 {#version-3-1-8}"
msgstr ""

msgid ""
"  * Added `--stop-on-failure` command line option. With this option,\n"
"    running test suite is stopped immediately when one test is failed\n"
"    or an error is raised in one test."
msgstr ""

msgid "## 3.1.7 - 2016-01-17 {#version-3-1-7}"
msgstr ""

msgid " * Added a missing require."
msgstr ""

msgid "## 3.1.6 - 2016-01-17 {#version-3-1-6}"
msgstr ""

msgid "It's a Ruby on Rails integration improvement release."
msgstr "Railsと一緒に使いやすくなったリリースです。"

msgid ""
"  * Filtered backtrace of power\\_assert.\n"
"    [GitHub#114]\n"
"  * Improved performance to retrieve test defined location.\n"
"  * Improved performance to run fixtures in a test.\n"
"  * Supported running a test by `yield` in `setup`:"
msgstr ""

msgid "    Before:"
msgstr ""

msgid ""
"        def setup\n"
"          @file = File.open(\"x\")\n"
"        end"
msgstr ""

msgid ""
"        def teardown\n"
"          @file.close\n"
"        end"
msgstr ""

msgid "    After:"
msgstr ""

msgid ""
"        def setup\n"
"          File.open(\"x\") do |file|\n"
"            @file = file\n"
"            yield\n"
"          end\n"
"        end"
msgstr ""

msgid ""
"  * Added `--default-test-path` option that specifies the default path\n"
"    that has tests.\n"
"  * Made auto runner registration more lazily. Auto runner isn't\n"
"    registered automatically until user defines a test. In the\n"
"    previous releases, auto runner is registered automatically when\n"
"    user defines a test case.\n"
"  * Supported specifying a test by location in command line. For\n"
"    example, the following command line runs a test that is defined in\n"
"    /tmp/test_a.rb at line 10:"
msgstr ""

msgid "        % ruby -r test-unit -e run_test /tmp/test_a.rb:10"
msgstr ""

msgid ""
"  * Fixed a bug that test isn't ran. The test has the same name as\n"
"    data driven test that is defined in parent test case.\n"
"    [GitHub#115]"
msgstr ""

msgid "## 3.1.5 - 2015-10-09 {#version-3-1-5}"
msgstr ""

msgid "It's a Rack integration improvement release."
msgstr "Rackと一緒に使いやすくなったリリースです。"

msgid ""
"  * Renamed experimental top-level `run` method to `run_test` method\n"
"    because `run` is conflicted with Rack.\n"
"    [GitHub#32][GitHub:basecamp/pow#303] [Reported by Yevhen Viktorov]"
msgstr ""

msgid "  * Yevhen Viktorov"
msgstr ""

msgid "## 3.1.4 - 2015-09-26 {#version-3-1-4}"
msgstr ""

msgid "It's a minor improvement release."
msgstr "微改良リリースです。"

msgid ""
"  * Updated sample code. [GitHub#109][Patch by takiy33]\n"
"  * Updated .travis.yml. [GitHub#110][Patch by takiy33]\n"
"  * document: Added table header in how to document.\n"
"    [GitHub#111][Patch by takiy33]\n"
"  * Removed duplicated code.\n"
"    [GitHub#112][Patch by takiy33]\n"
"  * Removed needless encoding conversion in fetching code snippet.\n"
"    [GitHub#113][Patch by NARUSE, Yui]"
msgstr ""

msgid ""
"  * takiy33\n"
"  * NARUSE, Yui"
msgstr ""

msgid "## 3.1.3 - 2015-07-26 {#version-3-1-3}"
msgstr ""

msgid "It's a bug fix release."
msgstr "バグフィックスリリースです。"

msgid "  * Removed unused `TODO` file. [GitHub#108][Patch by takiy33]"
msgstr ""

msgid ""
"  * `--location`: Fixed a bug that `--location LINE` doesn't work when\n"
"    test script is specified as relative path. [Reported by TOMITA Masahiro]"
msgstr ""

msgid "    The following doesn't work:"
msgstr ""

msgid "        % ruby ./test.rb --location 10"
msgstr ""

msgid "    The following works:"
msgstr ""

msgid "        % ruby test.rb --location 10"
msgstr ""

msgid ""
"  * takiy33\n"
"  * TOMITA Masahiro"
msgstr ""

msgid "## 3.1.2 - 2015-06-09 {#version-3-1-2}"
msgstr ""

msgid "It's command line option improvements fix release."
msgstr ""

msgid ""
"  * `--location`: Made path match rule more strict.\n"
"    [Suggested by kimura wataru]\n"
"    * Before:\n"
"      * If test defined path ends with the specified path, the test is\n"
"        matched.\n"
"    * After:\n"
"      * If base name of test defined path equals to the specified\n"
"        path, the test is matched.\n"
"      * If relative path of test defined path equals to the specified\n"
"        path, the test is matched.\n"
"      * If the specified path is absolute path and test defined path\n"
"        equals to the specified path, the test is matched.\n"
"  * `--pattern`: If the option is specified, the default patterns\n"
"    aren't used. In the earlier versions, both the default patterns\n"
"    and the specified patterns are used.\n"
"    [Suggested by kimura wataru]"
msgstr ""

msgid "  * kimura wataru"
msgstr ""

msgid "## 3.1.1 - 2015-05-29 {#version-3-1-1}"
msgstr ""

msgid ""
"  * Fixed a bug that `--location` detects tests not only in sub test\n"
"    case but also parent test case.\n"
"    [GitHub#105][Reported by wanabe]"
msgstr ""

msgid "  * wanabe"
msgstr ""

msgid "## 3.1.0 - 2015-05-28 {#version-3-1-0}"
msgstr ""

msgid "  * [ui][console] Removed needless new line."
msgstr ""

msgid ""
"  * Fixed a bug that priority mode can't be used on Windows.\n"
"    [GitHub#95][Reported by Daniel Berger]\n"
"  * Fixed a homepage URL RubyGems spec.\n"
"    [GitHub#96][Patch by Masayoshi Takahashi]\n"
"    supported.) [GitHub#89][Patch by Aaron Stone]\n"
"  * Fixed a bug that shutdown hook isn't called when pass throw\n"
"    exception such as `Interrupt` is raised.\n"
"    [GitHub#98][Reported by jeremiahishere.]\n"
"  * Fixed typos in documents.\n"
"    [GitHub#100][Reported by scivola]\n"
"    [GitHub#102][GitHub#103][Patch by Masafumi Yokoyama]\n"
"  * Fixed a bug that the same name test isn't executed in sub test case.\n"
"    [GitHub#104][Reported by wanabe]"
msgstr ""

msgid ""
"  * Daniel Berger\n"
"  * Masayoshi Takahashi\n"
"  * jeremiahishere\n"
"  * scivola\n"
"  * Masafumi Yokoyama\n"
"  * wanabe"
msgstr ""

msgid "## 3.0.9 - 2014-12-31 {#version-3-0-9}"
msgstr ""

msgid "It's a release that improves colors."
msgstr ""

msgid ""
"  * Added a work around for Ruby 1.8. (Note: Ruby 1.8 isn't\n"
"    supported.) [GitHub#89][Patch by Aaron Stone]\n"
"  * Supported colorized output on Windows.\n"
"    [GitHub#90][Patch by usa]\n"
"  * Improved colorized output.\n"
"    http://www.a-k-r.org/d/2014-12.html#a2014_12_27_1\n"
"    [Suggested by Tanaka Akira]"
msgstr ""

msgid ""
"  * Aaron Stone\n"
"  * usa\n"
"  * Tanaka Akira"
msgstr ""

msgid "## 3.0.8 - 2014-12-12 {#version-3-0-8}"
msgstr ""

msgid "It's a release that supports Ruby 2.2.0 preview2."
msgstr ""

msgid ""
"  * Added a link for YARD in README.\n"
"    [GitHub:test-unit.github.io#2][Reported by sunnyone]\n"
"  * Added description about \"/PATTERN/\" style value in auto runner usage.\n"
"    [GitHub#86][Suggested by sunnyone]\n"
"  * Supported Ruby 2.2.0 preview2 in `assert_throw` and\n"
"    `assert_nothing_thrown`."
msgstr ""

msgid ""
"  * Fixed a bug that error report is failed when source encoding and\n"
"    locale encoding are different.\n"
"    [GitHub#87][Reported by scivola]"
msgstr ""

msgid ""
"  * sunnyone\n"
"  * scivola"
msgstr ""

msgid "## 3.0.7 - 2014-11-14 {#version-3-0-7}"
msgstr ""

msgid "It's a minor update release."
msgstr "マイナーアップデートリリースです。"

msgid ""
"  * Fixed a bug that teardown blocks aren't called with sub class to\n"
"    parent class order.\n"
"    [GitHub#85][Reported by TOMITA Masahiro]"
msgstr ""

msgid "  * TOMITA Masahiro"
msgstr ""

msgid "## 3.0.6 - 2014-11-09 {#version-3-0-6}"
msgstr ""

msgid ""
"  * Improved code snippet location.\n"
"    [GitHub#84][Patch by Yuki Kurihara]"
msgstr ""

msgid "  * Yuki Kurihara"
msgstr ""

msgid "## 3.0.5 - 2014-11-08 {#version-3-0-5}"
msgstr ""

msgid ""
"  * Fixed a bug that startup/shutdown of parent test case isn't called\n"
"    when the test case includes one or more modules.\n"
"    [GitHub#83][Reported by Chadderton Odwazny]"
msgstr ""

msgid "  * Chadderton Odwazny"
msgstr ""

msgid "## 3.0.4 - 2014-11-01 {#version-3-0-4}"
msgstr ""

msgid ""
"  * Stopped to remove JRuby and Rubinius internal backtrace entries from\n"
"    backtrace on failure/error.\n"
"    [GitHub#82][Patch by Charles Oliver Nutter]"
msgstr ""

msgid "## 3.0.3 - 2014-10-29 {#version-3-0-3}"
msgstr ""

msgid ""
"  * Improved `Test::Unit::TestCase.test` performance.\n"
"    100 times faster.\n"
"  * Supported `Proc` for user message.\n"
"    [Sugested by Nobuyoshi Nakada]"
msgstr ""

msgid ""
"  * Fixed markup in document.\n"
"    [GitHub#81][Patch by Masafumi Yokoyama]"
msgstr ""

msgid ""
"  * Masafumi Yokoyama\n"
"  * Nobuyoshi Nakada"
msgstr ""

msgid "## 3.0.2 - 2014-10-15 {#version-3-0-2}"
msgstr ""

msgid ""
"  * Supported broken `==` implementation.\n"
"    `==` implementation should be fixed but it's not work of test-unit. :<\n"
"    [GitHub#71][Reported by Emily]\n"
"  * [UI][console]: Accepted no message failure.\n"
"    [GitHub#66][Reported by Brian Tatnall]\n"
"  * Updated gem description.\n"
"    [GitHub#74][Patch by Vít Ondruch]\n"
"  * Updated GPL text.\n"
"    [GitHub#78][Patch by Vít Ondruch]"
msgstr ""

msgid ""
"  * Removed needless executable bit from README file.\n"
"    [GitHub#79][Patch by Vít Ondruch]"
msgstr ""

msgid ""
"  * Emily\n"
"  * Brian Tatnall\n"
"  * Vít Ondruch"
msgstr ""

msgid "## 3.0.1 - 2014-08-05 {#version-3-0-1}"
msgstr ""

msgid ""
"  * Improved Ruby 1.8.7 support. Note that we don't support Ruby 1.8.7\n"
"    actively. We just support if its support is painless.\n"
"    [GitHub#71][Patch by estolfo]"
msgstr ""

msgid "  * estolfo"
msgstr ""

msgid "## 3.0.0 - 2014-08-03 {#version-3-0-0}"
msgstr ""

msgid "It's Power Assert supported release!"
msgstr "Power Assertをサポートしたリリースです！"

msgid ""
"  * Improved Rubinius support. [Ryo Onodera]\n"
"  * Updated RR repository link. [GitHub#56][Patch by Kenichi Kamiya]\n"
"  * Added some minitest compatible assertions. We don't recommend\n"
"    using these assertions. They are just for migrating from minitest.\n"
"    [GitHub#57][Patch by Karol Bucek]\n"
"    * {Test::Unit::Assertions#refute}\n"
"    * {Test::Unit::Assertions#refute_predicate}\n"
"    * {Test::Unit::Assertions#refute_empty}\n"
"    * {Test::Unit::Assertions#assert_not_includes}\n"
"    * {Test::Unit::Assertions#refute_includes}\n"
"    * {Test::Unit::Assertions#assert_not_instance_of}\n"
"    * {Test::Unit::Assertions#refute_instance_of}\n"
"    * {Test::Unit::Assertions#assert_not_kind_of}\n"
"    * {Test::Unit::Assertions#refute_kind_of}\n"
"    * {Test::Unit::Assertions#assert_not_operator}\n"
"    * {Test::Unit::Assertions#refute_operator}\n"
"  * Improved code readability. [Suggested by Kenichi Kamiya]\n"
"  * Made license field in RubyGems parseable.\n"
"    [GitHub#60][Patch by Michael Grosser]\n"
"  * Improved test case match feature by `--testcase` and `--ignore-testcase`\n"
"    options. They also checks parent class names.\n"
"  * Made inspected representation of Numeric objects especially\n"
"    BigDecimal more readable. [GitHub#64][Reported by Byron Appelt]\n"
"  * Added badges for Traivs CI and RubyGems.\n"
"    [GitHub#65][Patch by Byron Appelt]\n"
"  * Supported Power Assert. You can use Power Assert with\n"
"    {Test::Unit::Assertions#assert} with block. See method document\n"
"    for details. We recommend using Power Assert for predicate method\n"
"    checks. For example, we recommend Power Assert rather than\n"
"    {Test::Unit::Assertions#assert_true},\n"
"    {Test::Unit::Assertions#assert_predicate} and so on. We don't\n"
"    recommend using Power Assert for equality check assertion.\n"
"    {Test::Unit::Assertions#assert_equal} should be used for the case.\n"
"    [Kazuki Tsujimoto]"
msgstr ""

msgid ""
"  * Fixed a bug that test case defined by block has wrong location.\n"
"    [GitHub#58][Patch by Narihiro Nakamura]\n"
"  * Fixed a bug that test methods defined in included modules in\n"
"    super-class are also collected.\n"
"    [GitHub#62][GitHub#63][Patch by Karol Bucek]"
msgstr ""

msgid ""
"  * Ryo Onodera\n"
"  * Kenichi Kamiya\n"
"  * Karol Bucek\n"
"  * Narihiro Nakamura\n"
"  * Michael Grosser\n"
"  * Byron Appelt\n"
"  * Kazuki Tsujimoto"
msgstr ""

msgid "## 2.5.5 - 2013-05-18 {#version-2-5-5}"
msgstr ""

msgid "It's Ruby 2.0.0 supported release!"
msgstr ""

msgid ""
"  * Supported Ruby 2.0.0. [GitHub#54] [Reported by mtasaka]\n"
"  * Accepted screen-256color TERM as 256 colors available environment.\n"
"    [GitHub#55] [Reported by Tom Miller]"
msgstr ""

msgid ""
"  * Fixed a typo in document.\n"
"    [GitHub#53] [Patch by Baptiste Fontaine]\n"
"  * Fixed a bug in {Test::Unit::Assertions#assert_in_epsilon}. It doesn't work"
"\n"
"    as expected if expected value is negative value.\n"
"    [Ruby Bug #8317] [Reported by Nobuhiro IMAI]"
msgstr ""

msgid ""
"  * Baptiste Fontaine\n"
"  * mtasaka\n"
"  * Tom Miller\n"
"  * Nobuhiro IMAI"
msgstr ""

msgid "## 2.5.4 - 2013-01-23 {#version-2-5-4}"
msgstr ""

msgid ""
"  * Added documents for data driven test functionality.\n"
"  * Added TSV support for data driven test functionality.\n"
"  * Support tag inspection on JRuby."
msgstr ""

msgid ""
"  * Fixed a bug. It is too slow to filter tests when there are many\n"
"    tests. [GitHub#46]\n"
"  * Accept anonymous test suite.\n"
"    [GitHub:#49] [Reported by Matthew Rudy Jacobs]"
msgstr ""

msgid "  * Matthew Rudy Jacobs"
msgstr ""

msgid "## 2.5.3 - 2012-11-28 {#version-2-5-3}"
msgstr ""

msgid "It's a release for minitest compatibility and bug fix."
msgstr "minitestとの互換製の改良とバグフィックスのリリースです。"

msgid ""
"  * Supported diff in invalid encoding.\n"
"  * Added some assersion methods just for minitest compatibility.\n"
"    Added methods are assert_includes(), refute_*() and refute().\n"
"    If you are test-unit user, please don't use them.\n"
"    [GitHub#40] [Suggested by Michael Grosser]\n"
"  * Added --attribute option to select target tests by attribute.\n"
"    [test-unit-users-en:00098] [Suggested by Piotr Nestorow]"
msgstr ""
"  * Supported diff in invalid encoding.\n"
"  * minitestとの互換性のために、assert_includes(), refute_*() and refute()を追加た。minitestと"
"の互換性のために入れただけのメソッドなので、もしtest-unitを使っているなら、これらのメソッドははできれば使わないでください。\n"
"    [GitHub#40] [Michael Grosserさんが提案]\n"
"  * Added --attribute option to select target tests by attribute.\n"
"    [test-unit-users-en:00098] [Suggested by Piotr Nestorow]"

msgid ""
"  * Allowed use of test for inheritance in ActionController::TestCase.\n"
"    [GitHub#42] [Patch by David Rasch]\n"
"  * Ensured evaluating at_exit block in top level.\n"
"    In IRB context, exit() specifies irb_exit().\n"
"    [test-unit-users-en:00089] [Reported by Daniel Berger]\n"
"  * Fixed a bug that decoration style description is ignored.\n"
"    \"decoration style description\" are using description method\n"
"    above \"def test_name\" or with Symbol specifying test_name.\n"
"    [GitHub#45] [Reported by Piotr Nestorow]"
msgstr ""

msgid ""
"  * Michael Grosser\n"
"  * David Rasch\n"
"  * Daniel Berger\n"
"  * Piotr Nestorow"
msgstr ""

msgid "## 2.5.2 - 2012-08-29 {#version-2-5-2}"
msgstr ""

msgid ""
"It's an improvement release for tmtms. `--location` is a similar\n"
"feature to `--line_number` in RSpec. `sub_test_case` is a similar\n"
"feature to `context` in shoulda-context and RSpec."
msgstr ""
"とみたさん用に改良したリリースです。 `--location` はRSpecの `--line_number` と似た機能です。 `sub_test_cas"
"e` はshoulda-contextとRSpecの `context` と似た機能です。"

msgid ""
"  * Cleaned up tests.\n"
"    [GitHub#34] [Patch by Michael Grosser]\n"
"  * Added missing background color for 8 color environment.\n"
"  * Added workaround for NetBeans.\n"
"    [GitHub#38] [Reported by Marc Cooper]\n"
"  * Added `--location` command line option that selects target tests\n"
"    by test defined location.\n"
"  * Created sub test suite for each subclassed test case.\n"
"  * [ui][console] Supported nested test suites.\n"
"  * Added {Test::Unit.at_start} and {Test::Unit.at_exit} hooks that\n"
"    are run before/after all tests are run.\n"
"    [Good hook name is suggested by kdmsnr]\n"
"  * Improved code snippet target on failure. Test method is always used\n"
"    for code snippet target.\n"
"    [GitHub#39] [Suggested by Michael Grosser]\n"
"  * Added {Test::Unit::TestCase.sub_test_case} that creates sub test case.\n"
"    The sub test case name isn't limited Ruby's constant name rule. You can\n"
"    specify the sub test case name in free form."
msgstr ""

msgid ""
"  * Michael Grosser\n"
"  * Marc Cooper\n"
"  * kdmsnr"
msgstr ""

msgid "## 2.5.1 - 2012-07-05 {#version-2-5-1}"
msgstr ""

msgid ""
"  * Supported installing from GitHub.\n"
"    [GitHub#29] [Suggested by Michael Grosser]\n"
"  * Supported ActiveSupport::TestCase.\n"
"    [GitHub#30] [Reported by Michael Grosser]\n"
"  * [ui][console] Improved multiline falut message display."
msgstr ""

msgid ""
"  * [ui][console] Fixed a bug that expected and actual values are\n"
"    empty.\n"
"    [GitHub#31][GitHub#33]\n"
"    [Reported by Kendall Buchanan][Reported by Mathieu Martin]\n"
"    [Hinted by Michael Grosser]\n"
"  * Fixed a bug that .gemspec can't be loaded on LANG=C.\n"
"    [RubyForge#29595] [Reported by Jean-Denis Koeck]"
msgstr ""
"  * [ui][console] 期待値と実測値が空になる問題を修正。\n"
"    [GitHub#31][GitHub#33]\n"
"    [Kendall Buchananさんが報告][Mathieu Martinさんが報告]\n"
"    [Michael Grosserさんがヒントを提供]\n"
"  * Fixed a bug that .gemspec can't be loaded on LANG=C.\n"
"    [RubyForge#29595] [Reported by Jean-Denis Koeck]"

msgid ""
"  * Michael Grosser\n"
"  * Kendall Buchanan\n"
"  * Mathieu Martin\n"
"  * Jean-Denis Koeck"
msgstr ""

msgid "## 2.5.0 - 2012-06-06 {#version-2-5-0}"
msgstr ""

msgid ""
"  * Fixed a backward incompatibility of `TestUnitMediator#run_suite`\n"
"    introduced in 2.4.9.\n"
"    [GitHub#28] [Reported by Vladislav Rassokhin]"
msgstr ""
"  * 2.4.9で入った `TestUnitMediator#run_suite` の後方非互換な変更を修正しました。\n"
"    [GitHub#28] [Vladislav Rassokhinさんが報告]"

msgid "  * Vladislav Rassokhin"
msgstr "  * Vladislav Rassokhinさん"

msgid "## 2.4.9 - 2012-06-03 {#version-2-4-9}"
msgstr ""

msgid ""
"  * `Test::Unit.run?` ->\n"
"    `Test::Unit::AutoRunner.need_auto_run?`. `Test::Unit.run?` is marked\n"
"    as deprecated but it is still available.\n"
"  * [experimental] Added top level \"run\" method for `\"ruby -rtest-unit -e\n"
"    run test/test_*.rb\"`. Is this API OK or dirty?\n"
"  * Made failure output more readable on no color mode.\n"
"  * Supported showing ASCII-8BIT diff in failure message.\n"
"  * [ui][console] Supported `ENV[\"TERM\"] == \"xterm-256color\"` as color\n"
"    available terminal.\n"
"    [GitHub#26] [Reported by Michael Grosser]\n"
"  * [ui][console] Supported \"-256color\" suffix `ENV[\"TERM\"]` terminal\n"
"    as 256 color supported terminal."
msgstr ""

msgid ""
"  * Fixed a bug that `--workdir` doesn't work.\n"
"  * Consumed processed command line parameters in `ARGV` as `--help`\n"
"    says.\n"
"    [RubyForge#29554] [Reported by Bob Saveland]\n"
"  * Added missing `require \"test/unit/diff\"`.\n"
"    [GitHub#25] [Reported by Stephan Kulow]"
msgstr ""

msgid ""
"  * Bob Saveland\n"
"  * Stephan Kulow\n"
"  * Michael Grosser"
msgstr ""

msgid "## 2.4.8 - 2012-3-6 {#version-2-4-8}"
msgstr ""

msgid ""
"  * Delayed at_exit registration until Test::Unit is used.\n"
"    [GitHub:#21] [Reported by Jason Lunn]\n"
"  * Added workaround for test-spec.\n"
"    [GitHub:#22] [Reported by Cédric Boutillier]"
msgstr ""

msgid ""
"  * Fixed an error on code snippet display on JRuby.\n"
"    [GitHub:#19][GitHub:#20]\n"
"    [Reported by Jørgen P. Tjernø][Patch by Junegunn Choi]"
msgstr ""
"  * JRuby上でテスト失敗時のコード表示時に発生していたエラーを修正した。\n"
"    [GitHub:#19][GitHub:#20]\n"
"    [Jørgen P. Tjernøさんが報告][Junegunn Choiさんがパッチ提供]"

msgid ""
"  * Jørgen P. Tjernø\n"
"  * Junegunn Choi\n"
"  * Jason Lunn"
msgstr ""

msgid "## 2.4.7 - 2012-2-10 {#version-2-4-7}"
msgstr ""

msgid "It's a code snippet improvement release."
msgstr "失敗時のコード表示を改良したリリースです。"

msgid "  * Supported code snippet display on all faults."
msgstr "  * 失敗時だけでなくエラー時などでもコードの一部を表示するようにした。"

msgid "## 2.4.6 - 2012-2-9 {#version-2-4-6}"
msgstr ""

msgid "It's a TAP runner separated release."
msgstr "TAPランナーサポートを分離したリリースです。"

msgid ""
"  * Moved TAP runner to test-unit-runner-tap gem from test-unit gem.\n"
"  * Supported code snippet display on failure."
msgstr ""

msgid "## 2.4.5 - 2012-1-16 {#version-2-4-5}"
msgstr ""

msgid "It's a failure message readability improvement release."
msgstr "失敗時のメッセージの読みやすさを改良したリリースです。"

msgid ""
"  * Removed needless information from exception inspected\n"
"    text on failure. It's for easy to read.\n"
"  * Supported custom inspector."
msgstr ""
"  * 失敗時に例外の内容を示すテキストから不必要な情報を削除した。これは例外の内容を読みやすくするためである。\n"
"  * Supported custom inspector."

msgid "## 2.4.4 - 2012-1-2 {#version-2-4-4}"
msgstr ""

msgid "It's a Rails integration improved release."
msgstr "Railsと一緒に使いやすくなったリリースです。"

msgid ""
"  * [ui][console] Don't break progress display when a test is failed.\n"
"  * [ui][console] Added markers betwen a failure detail\n"
"    message in progress to improve visibility.\n"
"  * [travis] Dropped Ruby 1.8.6 as a test target. [GitHub:#13]\n"
"    [Patch by Josh Kalderimis]\n"
"  * Supported expected value == 0 case in assert_in_epsilon. [RubyForge#29485]"
"\n"
"    [Reported by Syver Enstad]\n"
"  * Supported a block style setup/teardown/cleanup."
msgstr ""

msgid ""
"  * Josh Kalderimis\n"
"  * Syver Enstad"
msgstr ""

msgid "## 2.4.3 - 2011-12-11 {#version-2-4-3}"
msgstr ""

msgid ""
"  * Improved SimpleCov integration by stopping to modify\n"
"    `ARGV` in auto runner. [GitHub:#12]\n"
"    [Reported by Nikos Dimitrakopoulos]\n"
"  * Improved JRuby integration by removing JRuby internal backtrace."
msgstr ""
"  * 自動テストランナー内で `ARGV` を変更しないようにしてSimpleCov連携を改良した。\n"
"    [GitHub:#12]\n"
"    [Nikos Dimitrakopoulosさんが報告]\n"
"  * Improved JRuby integration by removing JRuby internal backtrace."

msgid "  * Nikos Dimitrakopoulos"
msgstr "  * Nikos Dimitrakopoulosさん"

msgid "## 2.4.2 - 2011-11-26 {#version-2-4-2}"
msgstr ""

msgid "  * `--name` supported data label."
msgstr "  * `--name` がデータのラベルも比較するようになった。"

msgid "## 2.4.1 - 2011-11-09"
msgstr ""

msgid ""
"  * Accepted AssertionMessage as assertion's user message.\n"
"    It is used in assert_select in actionpack.\n"
"    [Reported by David Heath]"
msgstr ""
"  * アサーションに指定するメッセージにAssertionMessageも使えるようにした。これはactionpack内のassert_selectで使わ"
"れている。\n"
"    [David Heathさんが報告]"

msgid ""
"  * Fixed test failure on LANG=C. #11 [Reported by boutil]\n"
"  * Suppress warnings on Ruby 1.9.2."
msgstr ""

msgid ""
"  * boutil\n"
"  * David Heath"
msgstr ""

msgid "## 2.4.0 - 2011-09-18"
msgstr ""

msgid ""
"  * Supported Travis CI. #5 [Suggested by James Mead]\n"
"  * Added Gemfile. #6 [Suggested by James Mead]\n"
"  * [ui][console] Supported notification in show-detail-immediately.\n"
"  * [ui][console] enable --show-detail-immediately by default.\n"
"  * [ui] Added --max-diff-target-string-size option.\n"
"  * [ui][console] Supported 256 colors."
msgstr ""

msgid ""
"  * Added missing fixture file. #7 [Reported by grafi-tt]\n"
"  * [ui][console] Added missing the last newline for progress level.\n"
"  * Supported correct backtrace for redefined notification.\n"
"  * Don't handle Timeout::Error as pass through exception on Ruby 1.8. #8\n"
"    [Reported by Marc Seeger (Acquia)]"
msgstr ""

msgid ""
"  * James Mead\n"
"  * grafi-tt\n"
"  * Marc Seeger (Acquia)"
msgstr ""

msgid "## 2.3.2 - 2011-08-15"
msgstr ""

msgid "A bug fix release."
msgstr "バグフィックスリリース。"

msgid "  * [ui][console] Added some newlines to improve readability."
msgstr "  * [ui][console] 読み易くするために改行を追加。"

msgid ""
"  * [ui][console] Worked --verbose again.\n"
"  * Re-supported Ruby 1.8.6. [Reported by James Mead]"
msgstr ""
"  * [ui][console] Worked --verbose again.\n"
"  * Ruby 1.8.6を再サポート。\n"
"    [James Meadさんが報告]"

msgid "  * James Mead"
msgstr "  * James Meadさん"

msgid "## 2.3.1 - 2011-08-06 {#version-2-3-1}"
msgstr ""

msgid "Output improvement release!"
msgstr ""

msgid ""
"  * [ui][console] Outputs omissions and notifications in short.\n"
"  * [ui][console] Added \"important-only\" verbose level.\n"
"  * Intelligence diff supports recursive references.\n"
"  * [rubyforge #29325] Supported Ruby Enterprise Edition.\n"
"    [Reported by Hans de Graaff]\n"
"  * [rubyforge #29326] Supported JRuby.\n"
"    [Reported by Hans de Graaff]\n"
"  * Added --show-detail-immediately option that shows\n"
"    fault details when a fault is occurred."
msgstr ""

msgid ""
"  * [pull request #1] Fixed a problem that load collector\n"
"    can't load a test file on Ruby 1.9. [Patch by grafi-tt]\n"
"  * [issue #3] Fixed a problem that implicit method name\n"
"    override by declarative style test definition.\n"
"    [Reported by Jeremy Stephens]"
msgstr ""

msgid ""
"  * grafi-tt\n"
"  * Jeremy Stephens\n"
"  * Hans de Graaff"
msgstr ""

msgid "## 2.3.0 / 2011-04-17"
msgstr ""

msgid ""
"* 13 enhancements\n"
"  * improve Hash key sorting for diff.\n"
"  * [#28928] support any characters in declarative style description.\n"
"    [Daniel Berger]\n"
"  * add Error#location and make #backtrace deprecated.\n"
"  * make TestCase#passed? public.\n"
"  * add result finished and pass assertion notifications.\n"
"  * add TestSuite#passed? public.\n"
"  * add XML test runner.\n"
"  * add --output-file-descriptor option.\n"
"  * measure elapsed time for each test.\n"
"  * add --collector option.\n"
"  * support test driven test.\n"
"    [Haruka Yoshihara]\n"
"  * add cleanup hook it runs between after test and before teardown.\n"
"  * support recursive collection sort for diff."
msgstr ""

msgid ""
"* Thanks\n"
"  * Daniel Berger\n"
"  * Haruka Yoshihara"
msgstr ""

msgid "## 2.2.0 / 2011-02-14"
msgstr ""

msgid ""
"* 22 enhancements\n"
"  * [#28808] accept String as delta for assert_in_delta.\n"
"    [Daniel Berger]\n"
"  * [test-unit-users-en:00035] make GC-able finished tests.\n"
"    [Daniel Berger]\n"
"  * use also COLUMNS environment variable to guess terminal width.\n"
"  * make delta for assert_in_delta optional.\n"
"    [Nobuyoshi Nakada]\n"
"  * add assert_not_respond_to.\n"
"    [Nobuyoshi Nakada]\n"
"  * add assert_not_match. assert_no_match is deprecated.\n"
"    [Nobuyoshi Nakada]\n"
"  * add assert_not_in_delta.\n"
"    [Nobuyoshi Nakada]\n"
"  * add assert_in_epsilon.\n"
"    [Nobuyoshi Nakada]\n"
"  * add assert_not_in_epsilon.\n"
"    [Nobuyoshi Nakada]\n"
"  * add assert_include.\n"
"    [Nobuyoshi Nakada]\n"
"  * add assert_not_include.\n"
"    [Nobuyoshi Nakada]\n"
"  * add assert_empty.\n"
"    [Nobuyoshi Nakada]\n"
"  * add assert_not_empty.\n"
"    [Nobuyoshi Nakada]\n"
"  * notify require failed paths.\n"
"  * validate message value for assert.\n"
"  * show throughputs at the last.\n"
"  * support not ASCII compatible string diff.\n"
"  * support colorized diff on encoding different string.\n"
"  * normalize entry order of Hash for readable diff.\n"
"  * add --ignore-name option.\n"
"  * add --ignore-testcase option.\n"
"  * add assert_not_send."
msgstr ""

msgid ""
"* Thanks\n"
"  * Daniel Berger\n"
"  * Nobuyoshi Nakada"
msgstr ""

msgid "## 2.1.2 / 2010-11-25"
msgstr ""

msgid ""
"* 1 enhancement\n"
"  * support auto runner prepare hook."
msgstr ""

msgid "## 2.1.1 / 2010-07-29"
msgstr ""

msgid ""
"* 1 bug fix\n"
"  * [test-unit-users-en:00026] re-work tap runner.\n"
"    [Daniel Berger]"
msgstr ""

msgid ""
"* Thanks\n"
"  * Daniel Berger"
msgstr ""

msgid "=== 2.1.0 / 2010-07-17"
msgstr ""

msgid ""
"* 1 bug fix\n"
"  * [#28267] global config file ignored\n"
"    [Daniel Berger]"
msgstr ""

msgid "## 2.0.8 / 2010-06-02"
msgstr ""

msgid ""
"* 5 major enchancements\n"
"  * collect *_test.rb and *-test.rb files as test files.\n"
"  * [#28181] improve assert_in_delta message.\n"
"    [Suggested by David MARCHALAND]\n"
"  * show string encoding in assert_equal failure message if\n"
"    they are different.\n"
"  * change default color scheme:\n"
"    * success: green back + white\n"
"    * failure: red back + white\n"
"  * add capture_output."
msgstr ""

msgid ""
"* 2 bug fixes\n"
"  * fix a bug that console runner on verbose mode causes an\n"
"    error for long test name (>= 61).\n"
"  * [#28093] Autorunner ignores all files in a directory named test by default"
"\n"
"    [Reported by Florian Frank]"
msgstr ""

msgid ""
"* Thanks\n"
"  * Florian Frank\n"
"  * David MARCHALAND"
msgstr ""

msgid "## 2.0.7 / 2010-03-09"
msgstr ""

msgid ""
"* 4 major enhancements\n"
"  * detect redefined test methods.\n"
"  * [INTERFACE IMCOMPATIBLE] multiple --name and --testcase\n"
"    options narrow down targets instead of adding targets.\n"
"  * [#27764] accept custom test_order for each test case.\n"
"    [Suggested by David MARCHALAND]\n"
"  * [#27790] ignore omitted tests from 'n% passed' report.\n"
"    [Suggested by Daniel Berger]"
msgstr ""

msgid ""
"* 2 minor enchancements\n"
"  * [#27832] ignore .git directory. [Suggested by Daniel Berger]\n"
"  * [#27792] require 'fileutils' and 'tmpdir' lazily for non-priority\n"
"    mode users. [Suggested by David MARCHALAND]"
msgstr ""

msgid ""
"* 2 bug fixes\n"
"  * [#27892] modify processed arguments array destructively.\n"
"    [Reported by Bob Saveland]\n"
"  * work without HOME environment variable.\n"
"    [Reported by Champak Ch]"
msgstr ""

msgid ""
"* Thanks\n"
"  * David MARCHALAND\n"
"  * Daniel Berger\n"
"  * Bob Saveland\n"
"  * Champak Ch"
msgstr ""

msgid "## 2.0.6 / 2010-01-09"
msgstr ""

msgid ""
"* 3 major enhancements\n"
"  * [#27380] Declarative syntax? [Daniel Berger]\n"
"    support declarative syntax:"
msgstr ""

msgid ""
"      test \"test description in natural language\" do\n"
"         ...\n"
"      end\n"
"  * support test description:\n"
"      description \"test description in natural language\"\n"
"      def test_my_test\n"
"         ...\n"
"      end\n"
"  * make max diff target string size customizable by\n"
"    TEST_UNIT_MAX_DIFF_TARGET_STRING_SIZE environment variable."
msgstr ""

msgid ""
"* 2 bug fixes\n"
"  * [#27374] omit_if unexpected behavior [David MARCHALAND]\n"
"  * fix a bug that tests in sub directories aren't load with --basedir.\n"
"    [Daniel Berger]"
msgstr ""

msgid ""
"* Thanks\n"
"  * David MARCHALAND\n"
"  * Daniel Berger"
msgstr ""

msgid "## 2.0.5 / 2009-10-18"
msgstr ""

msgid ""
"* 1 bug fixes\n"
"  * [#27314] fix diff may raise an exception. [Erik Hollensbe]"
msgstr ""

msgid ""
"* Thanks\n"
"  * Erik Hollensbe"
msgstr ""

msgid "## 2.0.4 / 2009-10-17"
msgstr ""

msgid ""
"* 4 major enhancements\n"
"  * use ~/.test-unit.yml as global configuration file.\n"
"  * add TAP runner. (--runner tap)\n"
"  * support colorized diff:\n"
"    https://test-unit.github.io/color-diff.png\n"
"  * add Test::Unit::AutoRunner.default_runner= to specify default test runner."
msgstr ""

msgid ""
"* 4 minor enhancements\n"
"  * improve verbose mode output format. (use indent)\n"
"  * support `NOT_PASS_THROUGH_EXCEPTIONS`.\n"
"  * support arguments option in `#{runner}_options`.\n"
"  * TC_ -> Test in sample test case name."
msgstr ""

msgid ""
"* 1 bug fixes\n"
"  * [#27195] test-unit-2.0.3 + ruby-1.9.1 cannot properly test\n"
"    DelegateClass subclasses [Mike Pomraning]"
msgstr ""

msgid ""
"* Thanks\n"
"  * Mike Pomraning"
msgstr ""

msgid "## 2.0.3 / 2009-07-19"
msgstr ""

msgid ""
"* 6 major enhancements\n"
"  * add assert_predicate.\n"
"  * add assert_not_predicate.\n"
"  * [#24210] assert_kind_of supports an array of classes or modules.\n"
"    [Daniel Berger]\n"
"  * assert_instance_of supports an array of classes or modules.\n"
"  * add --default-priority option.\n"
"  * [#26627] add --order option. [Daniel Berger]"
msgstr ""

msgid ""
"* 4 minor enhancements\n"
"  * use yellow foreground + black background for error.\n"
"  * don't show diff for long string.\n"
"  * accept \"*term-color\" TERM environment as colorizable terminal.\n"
"    (e.g. Apple's Terminal)\n"
"  * [#26268] add a workaround for test-spec's after_all. [Angelo Lakra]"
msgstr ""

msgid ""
"* 1 bug fix\n"
"  * [#23586] re-support ruby 1.9.1. [Diego Pettenò]"
msgstr ""

msgid ""
"* Thanks\n"
"  * Diego Pettenò\n"
"  * Daniel Berger\n"
"  * Angelo Lakra"
msgstr ""

msgid "## 2.0.2 / 2008-12-21"
msgstr ""

msgid "* 2 major enhancements"
msgstr ""

msgid ""
"  * re-support ruby 1.8.5.\n"
"  * improve exception object comparison."
msgstr ""

msgid "* 3 bug fixes"
msgstr ""

msgid ""
"  * [#22723]: collector fails on anonymous classes\n"
"  * [#22986]: Test names with '?' blow up on Windows\n"
"  * [#22988]: don't create .test-result on non-priority mode."
msgstr ""

msgid "* Thanks"
msgstr "* 感謝"

msgid ""
"  * Erik Hollensbe\n"
"  * Daniel Berger\n"
"  * Bill Lear"
msgstr ""

msgid "## 2.0.1 / 2008-11-09"
msgstr ""

msgid "* 19 major enhancements"
msgstr ""

msgid ""
"  * support ruby 1.9.1.\n"
"  * add run_test method to be extensible.\n"
"  * improve priority-mode auto off.\n"
"  * improve startup/shutdown RDoc. [Daniel Berger]\n"
"  * add assert_compare. [#20851] [Designing Patterns]\n"
"  * add assert_fail_assertion. [#20851] [Designing Patterns]\n"
"  * add assert_raise_message. [#20851] [Designing Patterns]\n"
"  * support folded diff.\n"
"  * add assert_raise_kind_of. [Daniel Berger]\n"
"  * ingore inherited test for nested test case.\n"
"  * add assert_const_defined.\n"
"  * add assert_not_const_defined.\n"
"  * support assert_raise with an exception object.\n"
"  * support assert_raise with no arguments that asserts any\n"
"    exception is raised. [#22602] [Daniel Berger]\n"
"  * support folded dot progress.\n"
"  * add --progress-row-max option.\n"
"  * support color scheme customize.\n"
"  * support configuration file. (YAML)\n"
"  * recognize test-XXX.rb files as test files not only test_XXX.rb"
msgstr ""

msgid ""
"  * Daniel Berger\n"
"  * Designing Patterns"
msgstr ""

msgid "## 2.0.0 / 2008-06-18"
msgstr ""

msgid "* 15 major enhancements"
msgstr ""

msgid ""
"  * support startup/shutdown. (test case level setup/teardown)\n"
"  * support multiple setup/teardown.\n"
"  * support pending.\n"
"  * support omission.\n"
"  * support notification.\n"
"  * support colorize.\n"
"  * support diff.\n"
"  * support test attribute.\n"
"  * add assert_boolean.\n"
"  * add assert_true.\n"
"  * add assert_false.\n"
"  * add --priority-mode option.\n"
"  * don't use ObjectSpace to collect test cases.\n"
"  * make more customizable. (additional options, exception handling and so on)"
"\n"
"  * improve Emacs integration."
msgstr ""

msgid "* 4 major changes"
msgstr ""

msgid ""
"  * remove GTK+1 support.\n"
"  * split GTK+ runner as another gem.\n"
"  * split FOX runner as another gem.\n"
"  * split Tk runner as another gem."
msgstr ""

msgid "## 1.2.3 / 2008-02-25"
msgstr ""

msgid "* 1 major enhancement"
msgstr ""

msgid "  * Birthday (as a gem)!"
msgstr ""

msgid ":nodoc:"
msgstr ""

# Test::Unit
msgid "# Test::Unit - Ruby Unit Testing Framework"
msgstr ""

# Test::Unit
msgid "## Introduction"
msgstr ""

# Test::Unit
msgid ""
"Unit testing is making waves all over the place, largely due to the\n"
"fact that it is a core practice of XP. While XP is great, unit testing\n"
"has been around for a long time and has always been a good idea. One\n"
"of the keys to good unit testing, though, is not just writing tests,\n"
"but having tests. What's the difference? Well, if you just _write_ a\n"
"test and throw it away, you have no guarantee that something won't\n"
"change later which breaks your code. If, on the other hand, you _have_\n"
"tests (obviously you have to write them first), and run them as often\n"
"as possible, you slowly build up a wall of things that cannot break\n"
"without you immediately knowing about it. This is when unit testing\n"
"hits its peak usefulness."
msgstr ""

# Test::Unit
msgid ""
"Enter Test::Unit, a framework for unit testing in Ruby, helping you to\n"
"design, debug and evaluate your code by making it easy to write and\n"
"have tests for it."
msgstr ""

# Test::Unit
msgid "## Notes"
msgstr ""

msgid "Test::Unit has grown out of and superceded Lapidary."
msgstr ""

# #run_test
msgid ""
"experimental. It is for \"ruby -rtest-unit -e run_test test/test_*.rb\".\n"
"Is this API OK or dirty?"
msgstr ""

# Test::Unit
msgid "## Feedback"
msgstr ""

# Test::Unit
msgid ""
"I like (and do my best to practice) XP, so I value early releases,\n"
"user feedback, and clean, simple, expressive code. There is always\n"
"room for improvement in everything I do, and Test::Unit is no\n"
"exception. Please, let me know what you think of Test::Unit as it\n"
"stands, and what you'd like to see expanded/changed/improved/etc. If\n"
"you find a bug, let me know ASAP; one good way to let me know what the\n"
"bug is is to submit a new test that catches it :-) Also, I'd love to\n"
"hear about any successes you have with Test::Unit, and any\n"
"documentation you might add will be greatly appreciated. My contact\n"
"info is below."
msgstr ""

# Test::Unit
msgid "## Contact Information"
msgstr ""

# Test::Unit
msgid ""
"A lot of discussion happens about Ruby in general on the ruby-talk\n"
"mailing list (http://www.ruby-lang.org/en/ml.html), and you can ask\n"
"any questions you might have there. I monitor the list, as do many\n"
"other helpful Rubyists, and you're sure to get a quick answer. Of\n"
"course, you're also welcome to email me (Nathaniel Talbott) directly\n"
"at mailto:testunit@talbott.ws, and I'll do my best to help you out."
msgstr ""

# Test::Unit
msgid "## Credits"
msgstr ""

msgid "I'd like to thank..."
msgstr ""

msgid "Matz, for a great language!"
msgstr ""

# Test::Unit
msgid ""
"Masaki Suketa, for his work on RubyUnit, which filled a vital need in\n"
"the Ruby world for a very long time. I'm also grateful for his help in\n"
"polishing Test::Unit and getting the RubyUnit compatibility layer\n"
"right. His graciousness in allowing Test::Unit to supercede RubyUnit\n"
"continues to be a challenge to me to be more willing to defer my own\n"
"rights."
msgstr ""

# Test::Unit
msgid ""
"Ken McKinlay, for his interest and work on unit testing, and for his\n"
"willingness to dialog about it. He was also a great help in pointing\n"
"out some of the holes in the RubyUnit compatibility layer."
msgstr ""

# Test::Unit
msgid ""
"Dave Thomas, for the original idea that led to the extremely simple\n"
"\"require 'test/unit'\", plus his code to improve it even more by\n"
"allowing the selection of tests from the command-line. Also, without\n"
"RDoc, the documentation for Test::Unit would stink a lot more than it\n"
"does now."
msgstr ""

# Test::Unit
msgid ""
"Everyone who's helped out with bug reports, feature ideas,\n"
"encouragement to continue, etc. It's a real privilege to be a part of\n"
"the Ruby community."
msgstr ""

# Test::Unit
msgid ""
"The guys at RoleModel Software, for putting up with me repeating, \"But\n"
"this would be so much easier in Ruby!\" whenever we're coding in Java."
msgstr ""

msgid "My Creator, for giving me life, and giving it more abundantly."
msgstr ""

# Test::Unit
msgid ""
"Test::Unit is copyright (c) 2000-2003 Nathaniel Talbott. It is free\n"
"software, and is distributed under the Ruby license. See the COPYING\n"
"file."
msgstr ""

# Test::Unit
msgid ""
"Exception: lib/test/unit/diff.rb is copyright (c)\n"
"2008-2010 Kouhei Sutou and 2001-2008 Python Software\n"
"Foundation. It is free software, and is distributed\n"
"under the Ruby license and/or the PSF license. See the\n"
"COPYING file and PSFL file."
msgstr ""

# Test::Unit
msgid "## Warranty"
msgstr ""

# Test::Unit
msgid ""
"This software is provided \"as is\" and without any express or\n"
"implied warranties, including, without limitation, the implied\n"
"warranties of merchantibility and fitness for a particular\n"
"purpose."
msgstr ""

# Test::Unit
msgid "## Author"
msgstr ""

# Test::Unit
msgid ""
"Nathaniel Talbott.\n"
"Copyright (c) 2000-2003, Nathaniel Talbott"
msgstr ""

# Test::Unit
msgid "----"
msgstr ""

# Test::Unit
msgid "# Usage"
msgstr ""

# Test::Unit
msgid ""
"The general idea behind unit testing is that you write a _test_\n"
"_method_ that makes certain _assertions_ about your code, working\n"
"against a _test_ _fixture_. A bunch of these _test_ _methods_ are\n"
"bundled up into a _test_ _suite_ and can be run any time the\n"
"developer wants. The results of a run are gathered in a _test_\n"
"_result_ and displayed to the user through some UI. So, lets break\n"
"this down and see how Test::Unit provides each of these necessary\n"
"pieces."
msgstr ""

# Test::Unit
msgid "## Assertions"
msgstr ""

# Test::Unit
msgid ""
"These are the heart of the framework. Think of an assertion as a\n"
"statement of expected outcome, i.e. \"I assert that x should be equal\n"
"to y\". If, when the assertion is executed, it turns out to be\n"
"correct, nothing happens, and life is good. If, on the other hand,\n"
"your assertion turns out to be false, an error is propagated with\n"
"pertinent information so that you can go back and make your\n"
"assertion succeed, and, once again, life is good. For an explanation\n"
"of the current assertions, see Test::Unit::Assertions."
msgstr ""

# Test::Unit
msgid "## Test Method & Test Fixture"
msgstr ""

# Test::Unit
msgid ""
"Obviously, these assertions have to be called within a context that\n"
"knows about them and can do something meaningful with their\n"
"pass/fail value. Also, it's handy to collect a bunch of related\n"
"tests, each test represented by a method, into a common test class\n"
"that knows how to run them. The tests will be in a separate class\n"
"from the code they're testing for a couple of reasons. First of all,\n"
"it allows your code to stay uncluttered with test code, making it\n"
"easier to maintain. Second, it allows the tests to be stripped out\n"
"for deployment, since they're really there for you, the developer,\n"
"and your users don't need them. Third, and most importantly, it\n"
"allows you to set up a common test fixture for your tests to run\n"
"against."
msgstr ""

# Test::Unit
msgid ""
"What's a test fixture? Well, tests do not live in a vacuum; rather,\n"
"they're run against the code they are testing. Often, a collection\n"
"of tests will run against a common set of data, also called a\n"
"fixture. If they're all bundled into the same test class, they can\n"
"all share the setting up and tearing down of that data, eliminating\n"
"unnecessary duplication and making it much easier to add related\n"
"tests."
msgstr ""

# Test::Unit
msgid ""
"Test::Unit::TestCase wraps up a collection of test methods together\n"
"and allows you to easily set up and tear down the same test fixture\n"
"for each test. This is done by overriding #setup and/or #teardown,\n"
"which will be called before and after each test method that is\n"
"run. The TestCase also knows how to collect the results of your\n"
"assertions into a Test::Unit::TestResult, which can then be reported\n"
"back to you... but I'm getting ahead of myself. To write a test,\n"
"follow these steps:"
msgstr ""

# Test::Unit
msgid ""
"* Make sure Test::Unit is in your library path.\n"
"* require 'test/unit' in your test script.\n"
"* Create a class that subclasses Test::Unit::TestCase.\n"
"* Add a method that begins with \"test\" to your class.\n"
"* Make assertions in your test method.\n"
"* Optionally define #setup and/or #teardown to set up and/or tear\n"
"  down your common test fixture.\n"
"* You can now run your test as you would any other Ruby\n"
"  script... try it and see!"
msgstr ""

# Test::Unit
msgid ""
"A really simple test might look like this (#setup and #teardown are\n"
"commented out to indicate that they are completely optional):"
msgstr ""

# Test::Unit
msgid ""
"    class MyTest < Test::Unit::TestCase\n"
"      # def setup\n"
"      # end"
msgstr ""

# Test::Unit
msgid ""
"      # def teardown\n"
"      # end"
msgstr ""

# Test::Unit
msgid ""
"      def test_fail\n"
"        assert(false, 'Assertion was false.')\n"
"      end\n"
"    end"
msgstr ""

# Test::Unit
msgid "## Test Runners"
msgstr ""

# Test::Unit
msgid ""
"So, now you have this great test class, but you still\n"
"need a way to run it and view any failures that occur\n"
"during the run. There are some test runner; console test\n"
"runner, GTK+ test runner and so on. The console test\n"
"runner is automatically invoked for you if you require\n"
"'test/unit' and simply run the file. To use another\n"
"runner simply set default test runner ID to\n"
"Test::Unit::AutoRunner:"
msgstr ""

# Test::Unit
msgid ""
"    require 'test/unit'\n"
"    Test::Unit::AutoRunner.default_runner = \"gtk2\""
msgstr ""

# Test::Unit
msgid "## Test Suite"
msgstr ""

# Test::Unit
msgid ""
"As more and more unit tests accumulate for a given project, it\n"
"becomes a real drag running them one at a time, and it also\n"
"introduces the potential to overlook a failing test because you\n"
"forget to run it. Suddenly it becomes very handy that the\n"
"TestRunners can take any object that returns a Test::Unit::TestSuite\n"
"in response to a suite method. The TestSuite can, in turn, contain\n"
"other TestSuites or individual tests (typically created by a\n"
"TestCase). In other words, you can easily wrap up a group of\n"
"TestCases and TestSuites."
msgstr ""

# Test::Unit
msgid ""
"Test::Unit does a little bit more for you, by wrapping\n"
"these up automatically when you require\n"
"'test/unit'. What does this mean? It means you could\n"
"write the above test case like this instead:"
msgstr ""

# Test::Unit
msgid ""
"    require 'test/unit'\n"
"    require 'test_myfirsttests'\n"
"    require 'test_moretestsbyme'\n"
"    require 'test_anothersetoftests'"
msgstr ""

# Test::Unit
msgid ""
"Test::Unit is smart enough to find all the test cases existing in\n"
"the ObjectSpace and wrap them up into a suite for you. It then runs\n"
"the dynamic suite using the console TestRunner."
msgstr ""

# Test::Unit
msgid "## Configuration file"
msgstr ""

msgid ""
"Test::Unit reads 'test-unit.yml' in the current working\n"
"directory as Test::Unit's configuration file. It can\n"
"contain the following configurations:"
msgstr ""
"Test::Unitは現在のワーキングディレクトリにある'test-unit.yml'をTest::Unitの設定ファイルとして読み込みます。このファイルに"
"は以下のような設定をすることができます。"

msgid ""
"Except color scheme definitions, all of them are\n"
"specified by command line option."
msgstr "カラースキーム定義以外はコマンドラインオプションで指定することができます。"

# Test::Unit
msgid ""
"SCHEME_NAME\n"
": the name of the color scheme"
msgstr ""

# Test::Unit
msgid ""
"EVENT_NAME\n"
": one of [success, failure, pending, omission, notification, error]"
msgstr ""

# Test::Unit
msgid ""
"COLOR_NAME\n"
": one of [black, red, green, yellow, blue, magenta, cyan, white]"
msgstr ""

# Test::Unit
msgid ""
"BOOLEAN\n"
": true or false"
msgstr ""

msgid ""
"You can use the above 'inverted' color scheme with the\n"
"following configuration:"
msgstr "上で定義した'inverted'カラースキムを使う設定は以下の通りです。"

# Test::Unit
msgid "## Questions?"
msgstr ""

# Test::Unit
msgid ""
"I'd really like to get feedback from all levels of Ruby\n"
"practitioners about typos, grammatical errors, unclear statements,\n"
"missing points, etc., in this document (or any other)."
msgstr ""

# @deprecated
msgid "Use Test::Unit::AutoRunner.need_auto_run= instead."
msgstr ""

# Test::Unit.run=
msgid ""
"Set true when Test::Unit has run.  If set to true Test::Unit\n"
"will not automatically run at exit."
msgstr ""

# @deprecated
msgid "Use Test::Unit::AutoRunner.need_auto_run? instead."
msgstr ""

# Test::Unit.run?
msgid "Already tests have run?"
msgstr ""

msgid "private"
msgstr ""

# Test::Unit.at_start
msgid ""
"Register a hook that is run before running tests.\n"
"To register multiple hooks, call this method multiple times."
msgstr ""

# Test::Unit.at_exit
# Test::Unit.at_start
# Test::Unit::TestCase.shutdown
# Test::Unit::TestCase.startup
msgid "Here is an example test case:"
msgstr ""

# Test::Unit.at_start
msgid ""
"    Test::Unit.at_start do\n"
"      # ...\n"
"    end"
msgstr ""

# Test::Unit.at_start
msgid ""
"    class TestMyClass1 < Test::Unit::TestCase\n"
"      class << self\n"
"        def startup\n"
"          # ...\n"
"        end\n"
"      end"
msgstr ""

# Test::Unit.at_start
msgid ""
"      def setup\n"
"        # ...\n"
"      end"
msgstr ""

# Test::Unit.at_exit
# Test::Unit.at_start
msgid ""
"      def test_my_class1\n"
"        # ...\n"
"      end"
msgstr ""

# Test::Unit.at_exit
# Test::Unit.at_start
msgid ""
"      def test_my_class2\n"
"        # ...\n"
"      end\n"
"    end"
msgstr ""

# Test::Unit.at_start
msgid ""
"    class TestMyClass2 < Test::Unit::TestCase\n"
"      class << self\n"
"        def startup\n"
"          # ...\n"
"        end\n"
"      end"
msgstr ""

# Test::Unit::TestCase
msgid "Here is a call order:"
msgstr ""

# Test::Unit.at_start
msgid ""
"* at_start\n"
"* TestMyClass1.startup\n"
"* TestMyClass1#setup\n"
"* TestMyClass1#test_my_class1\n"
"* TestMyClass1#setup\n"
"* TestMyClass1#test_my_class2\n"
"* TestMyClass2#setup\n"
"* TestMyClass2#test_my_class1\n"
"* TestMyClass2#setup\n"
"* TestMyClass2#test_my_class2"
msgstr ""

# @example
msgid ""
"Test::Unit.at_start do\n"
"  puts \"Start!\"\n"
"end"
msgstr ""

# @since
msgid "2.5.2"
msgstr ""

# @yield
msgid "A block that is run before running tests."
msgstr ""

# Test::Unit.at_exit
msgid ""
"Register a hook that is run after running tests.\n"
"To register multiple hooks, call this method multiple times."
msgstr ""

# Test::Unit.at_exit
msgid ""
"    Test::Unit.at_exit do\n"
"      # ...\n"
"    end"
msgstr ""

# Test::Unit.at_exit
msgid ""
"    class TestMyClass1 < Test::Unit::TestCase\n"
"      class << self\n"
"        def shutdown\n"
"          # ...\n"
"        end\n"
"      end"
msgstr ""

# Test::Unit.at_exit
msgid ""
"      def teardown\n"
"        # ...\n"
"      end"
msgstr ""

# Test::Unit.at_exit
msgid ""
"    class TestMyClass2 < Test::Unit::TestCase\n"
"      class << self\n"
"        def shutdown\n"
"          # ...\n"
"        end\n"
"      end"
msgstr ""

# Test::Unit.at_exit
msgid ""
"* TestMyClass1#test_my_class1\n"
"* TestMyClass1#teardown\n"
"* TestMyClass1#test_my_class2\n"
"* TestMyClass1#teardown\n"
"* TestMyClass1.shutdown\n"
"* TestMyClass2#test_my_class1\n"
"* TestMyClass2#teardown\n"
"* TestMyClass2#test_my_class2\n"
"* TestMyClass2#teardown\n"
"* TestMyClass2.shutdown\n"
"* at_exit"
msgstr ""

# @example
msgid ""
"Test::Unit.at_exit do\n"
"  puts \"Exit!\"\n"
"end"
msgstr ""

# @yield
msgid "A block that is run after running tests."
msgstr ""

msgid "Thrown by Test::Unit::Assertions when an assertion fails."
msgstr ""

# @param
msgid "tag|param|value"
msgstr ""

# @param value
msgid "the value to set the attribute expected to."
msgstr ""

# @param value
msgid "the value to set the attribute actual to."
msgstr ""

# @param value
msgid "the value to set the attribute user_message to."
msgstr ""

msgid "Returns the value of attribute expected"
msgstr ""

# Test::Unit::AssertionFailedError#expected=
msgid "Sets the attribute expected"
msgstr ""

msgid "Returns the value of attribute actual"
msgstr ""

# Test::Unit::AssertionFailedError#actual=
msgid "Sets the attribute actual"
msgstr ""

msgid "Returns the value of attribute user_message"
msgstr ""

# Test::Unit::AssertionFailedError#user_message=
msgid "Sets the attribute user_message"
msgstr ""

# @param value
msgid "the value to set the attribute inspected_expected to."
msgstr ""

# @param value
msgid "the value to set the attribute inspected_actual to."
msgstr ""

msgid "Returns the value of attribute inspected_expected"
msgstr ""

# Test::Unit::AssertionFailedError#inspected_expected=
msgid "Sets the attribute inspected_expected"
msgstr ""

msgid "Returns the value of attribute inspected_actual"
msgstr ""

# Test::Unit::AssertionFailedError#inspected_actual=
msgid "Sets the attribute inspected_actual"
msgstr ""

# @return [AssertionFailedError]
msgid "a new instance of AssertionFailedError"
msgstr ""

# Test::Unit::Assertions
msgid ""
"Test::Unit::Assertions contains the standard Test::Unit assertions.\n"
"Assertions is included in Test::Unit::TestCase."
msgstr ""

# Test::Unit::Assertions
msgid ""
"To include it in your own code and use its functionality, you simply\n"
"need to rescue Test::Unit::AssertionFailedError. Additionally you may\n"
"override add_assertion to get notified whenever an assertion is made."
msgstr ""

# Test::Unit::Assertions
msgid "Notes:"
msgstr ""

# Test::Unit::Assertions
msgid ""
"* The message to each assertion, if given, will be propagated with the\n"
"  failure.\n"
"* It is easy to add your own assertions based on assert_block()."
msgstr ""

# @example
msgid "tag|example|Example Custom Assertion"
msgstr ""

# @example Example Custom Assertion
msgid ""
"\n"
"def deny(boolean, message=nil)\n"
"  message = build_message(message, '<?> is not false or nil.', boolean)\n"
"  assert_block(message) do\n"
"    not boolean\n"
"  end\n"
"end"
msgstr ""

# Test::Unit::Assertions#assert_block
msgid ""
"The assertion upon which all other assertions are based. Passes if the\n"
"block yields true."
msgstr ""

# @example
msgid ""
"assert_block \"Couldn't do the thing\" do\n"
"  do_the_thing\n"
"end"
msgstr ""

# @overload
msgid "tag|overload|assert"
msgstr ""

# @example
msgid "tag|example|Pass patterns"
msgstr ""

# @example Pass patterns
msgid ""
"assert(true)               # => pass\n"
"assert([1, 2].include?(1)) # => pass"
msgstr ""

# @example
msgid "tag|example|Failure patterns"
msgstr ""

# @example Failure patterns
msgid ""
"assert(nil)                # => failure\n"
"assert(false)              # => failure\n"
"assert([1, 2].include?(5)) # => failure"
msgstr ""

# @param [Object]
msgid "tag|param|object"
msgstr ""

# @param [Object] object
msgid "The check target."
msgstr ""

# @param [String]
msgid "tag|param|message"
msgstr ""

# @param [String] message
msgid ""
"The additional user message. It is\n"
"showed when the assertion is failed."
msgstr ""

# @example
msgid "tag|example|Power Assert"
msgstr ""

# @example Power Assert
msgid ""
"coins = [1, 5, 50]\n"
"target_coin = 10\n"
"assert do\n"
"  coins.include?(target_coin)\n"
"end\n"
"# =>\n"
"#  coins.include?(target_coin)\n"
"#  |     |        |\n"
"#  |     |        10\n"
"#  |     false\n"
"#  [1, 5, 50]"
msgstr ""

# @example Pass patterns
msgid ""
"assert {true}               # => pass\n"
"assert {[1, 2].include?(1)} # => pass"
msgstr ""

# @example Failure patterns
msgid ""
"assert {nil}                # => failure\n"
"assert {false}              # => failure\n"
"assert {[1, 2].include?(5)} # => failure"
msgstr ""

# @yield
msgid "[] Given no parameters to the block."
msgstr ""

# @yieldreturn [Object]
msgid "The checked object."
msgstr ""

# Test::Unit::Assertions#assert
msgid "Asserts that `object` is not false nor nil."
msgstr ""

# Test::Unit::Assertions#assert
msgid "Asserts that the givens block returns not false nor nil."
msgstr ""

# Test::Unit::Assertions#assert
msgid ""
"Normally, you don't need to use this assertion. Use more\n"
"specific assertions such as #assert_equal and\n"
"#assert_include."
msgstr ""

# Test::Unit::Assertions#assert
msgid ""
"This style uses Power Assert. It means that you can see each\n"
"object values in method chains on failure. See the following\n"
"example about Power Assert."
msgstr ""

# Test::Unit::Assertions#assert
msgid ""
"We recommend you to use Power Assert for predicate method\n"
"checks rather than existing assertions such as\n"
"#assert_include and #assert_predicate. Power Assert shows\n"
"useful message for debugging."
msgstr ""

# Test::Unit::Assertions#assert
msgid ""
"We don't recommend you use Power Assert for equality\n"
"check. You should use #assert_equal for the case. Because\n"
"#assert_equal shows more useful message for debugging."
msgstr ""

# Test::Unit::Assertions#refute
msgid "Asserts that `object` is false or nil."
msgstr ""

# @example Pass patterns
msgid ""
"refute(false)    # => pass\n"
"refute(nil)      # => pass"
msgstr ""

# @example Fialure patterns
msgid ""
"refute(true)     # => failure\n"
"refute(\"string\") # => failure"
msgstr ""

msgid "Just for minitest compatibility. :<"
msgstr "minitestとの互換製のためだけのリリースです。 :"

# @param [Object] object
msgid "The object to be asserted."
msgstr ""

# @since
msgid "2.5.3"
msgstr ""

# Test::Unit::Assertions#assert_equal
msgid "Passes if `expected` == `actual`."
msgstr ""

# Test::Unit::Assertions#assert_equal
msgid ""
"Note that the ordering of arguments is important, since a helpful\n"
"error message is generated when this one fails that tells you the\n"
"values of expected and actual."
msgstr ""

# @example
msgid "assert_equal 'MY STRING', 'my string'.upcase"
msgstr ""

# Test::Unit::Assertions#assert_raise
# Test::Unit::Assertions#assert_raises
msgid ""
"Passes if the block raises one of the expected\n"
"exceptions. When an expected exception is an Exception\n"
"object, passes if expected_exception == actual_exception."
msgstr ""

# @example
msgid ""
"assert_raise(RuntimeError, LoadError) do\n"
"  raise 'Boom!!!'\n"
"end # -> pass\n"
"\n"
"assert_raise do\n"
"  raise Exception, 'Any exception should be raised!!!'\n"
"end # -> pass\n"
"\n"
"assert_raise(RuntimeError.new(\"XXX\")) {raise \"XXX\"} # -> pass\n"
"assert_raise(MyError.new(\"XXX\"))      {raise \"XXX\"} # -> fail\n"
"assert_raise(RuntimeError.new(\"ZZZ\")) {raise \"XXX\"} # -> fail"
msgstr ""

msgid ""
"Passes if the block raises one of the expected\n"
"exceptions. When an expected exception is an Exception\n"
"object, passes if expected_exception == actual_exception.\n"
"Just for minitest compatibility. :<"
msgstr ""

# Test::Unit::Assertions#assert_raise_kind_of
msgid ""
"Passes if the block raises one of the given\n"
"exceptions or sub exceptions of the given exceptions."
msgstr ""

# @example
msgid ""
"assert_raise_kind_of(SystemCallError) do\n"
"  raise Errno::EACCES\n"
"end"
msgstr ""

# Test::Unit::Assertions#assert_instance_of
msgid ""
"Passes if `object`.instance_of?(`klass`). When `klass` is\n"
"an array of classes, it passes if any class\n"
"satisfies +object.instance_of?(class)."
msgstr ""

# @example
msgid ""
"assert_instance_of(String, 'foo')            # -> pass\n"
"assert_instance_of([Fixnum, NilClass], 100)  # -> pass\n"
"assert_instance_of([Numeric, NilClass], 100) # -> fail"
msgstr ""

# Test::Unit::Assertions#assert_not_instance_of
msgid ""
"Passes if `object`.instance_of?(`klass`) does not hold.\n"
"When `klass` is an array of classes, it passes if no class\n"
"satisfies +object.instance_of?(class)."
msgstr ""

# @example
msgid ""
"assert_not_instance_of(String, 100)                # -> pass\n"
"assert_not_instance_of([Fixnum, NilClass], '100')  # -> pass\n"
"assert_not_instance_of([Numeric, NilClass], 100)   # -> fail"
msgstr ""

# @since
msgid "3.0.0"
msgstr ""

msgid ""
"Passes if `object`.instance_of?(`klass`) does not hold.\n"
"When `klass` is an array of classes, it passes if no class\n"
"satisfies +object.instance_of?(class).\n"
"Just for minitest compatibility. :<"
msgstr ""

# Test::Unit::Assertions#assert_nil
msgid "Passes if `object` is nil."
msgstr ""

# @example
msgid "assert_nil [1, 2].uniq!"
msgstr ""

# Test::Unit::Assertions#assert_kind_of
msgid ""
"Passes if `object`.kind_of?(`klass`). When `klass` is\n"
"an array of classes or modules, it passes if any\n"
"class or module satisfies +object.kind_of?(class_or_module)."
msgstr ""

# @example
msgid ""
"assert_kind_of(Object, 'foo')                # -> pass\n"
"assert_kind_of([Fixnum, NilClass], 100)      # -> pass\n"
"assert_kind_of([Fixnum, NilClass], \"string\") # -> fail"
msgstr ""

# Test::Unit::Assertions#assert_not_kind_of
msgid ""
"Passes if `object`.kind_of?(`klass`) does not hold.\n"
"When `klass` is an array of classes or modules, it passes only if all\n"
"classes (and modules) do not satisfy +object.kind_of?(class_or_module)."
msgstr ""

# @example
msgid ""
"assert_not_kind_of(Fixnum, 'foo')           # -> pass\n"
"assert_not_kind_of([Fixnum, NilClass], '0') # -> pass\n"
"assert_not_kind_of([Fixnum, NilClass], 100) # -> fail"
msgstr ""

msgid ""
"Passes if `object`.kind_of?(`klass`) does not hold.\n"
"When `klass` is an array of classes or modules, it passes only if all\n"
"classes (and modules) do not satisfy +object.kind_of?(class_or_module).\n"
"Just for minitest compatibility. :<"
msgstr ""

# Test::Unit::Assertions#assert_respond_to
msgid "Passes if `object` .respond_to? `method`"
msgstr ""

# @example
msgid "assert_respond_to 'bugbear', :slice"
msgstr ""

# Test::Unit::Assertions#assert_not_respond_to
msgid "Passes if `object` does not .respond_to? `method`."
msgstr ""

# @example
msgid ""
"assert_not_respond_to('bugbear', :nonexistence) # -> pass\n"
"assert_not_respond_to('bugbear', :size)         # -> fail"
msgstr ""

msgid ""
"Passes if `object` does not .respond_to? `method`.\n"
"Just for minitest compatibility. :<"
msgstr ""

# Test::Unit::Assertions#assert_match
msgid "Passes if `pattern` =~ `string`."
msgstr ""

# @example
msgid "assert_match(/\\d+/, 'five, 6, seven')"
msgstr ""

# Test::Unit::Assertions#assert_same
msgid ""
"Passes if `actual` .equal? `expected` (i.e. they are the same\n"
"instance)."
msgstr ""

# @example
msgid ""
"o = Object.new\n"
"assert_same o, o"
msgstr ""

# Test::Unit::Assertions#assert_not_operator
# Test::Unit::Assertions#assert_operator
# Test::Unit::Assertions#refute_operator
msgid "Compares the `object1` with `object2` using `operator`."
msgstr ""

# Test::Unit::Assertions#assert_operator
msgid "Passes if object1.__send__(operator, object2) is true."
msgstr ""

# @example
msgid "assert_operator 5, :>=, 4"
msgstr ""

# Test::Unit::Assertions#assert_not_operator
# Test::Unit::Assertions#refute_operator
msgid "Passes if object1.__send__(operator, object2) is not true."
msgstr ""

# @example
msgid ""
"assert_not_operator(5, :<, 4) # => pass\n"
"assert_not_operator(5, :>, 4) # => fail"
msgstr ""

msgid ""
"Passes if object1.__send__(operator, object2) is not true.\n"
"Just for minitest compatibility. :<"
msgstr ""

# Test::Unit::Assertions#assert_nothing_raised
msgid "Passes if block does not raise an exception."
msgstr ""

# @example
msgid ""
"assert_nothing_raised do\n"
"  [1, 2].uniq\n"
"end"
msgstr ""

# Test::Unit::Assertions#flunk
msgid "Flunk always fails."
msgstr ""

# @example
msgid "flunk 'Not done testing yet.'"
msgstr ""

# Test::Unit::Assertions#assert_not_same
msgid "Passes if ! `actual` .equal? `expected`"
msgstr ""

# @example
msgid "assert_not_same Object.new, Object.new"
msgstr ""

msgid ""
"Passes if ! `actual` .equal? `expected`\n"
"Just for minitest compatibility. :<"
msgstr ""

# Test::Unit::Assertions#assert_not_equal
msgid "Passes if `expected` != `actual`"
msgstr ""

# @example
msgid "assert_not_equal 'some string', 5"
msgstr ""

msgid ""
"Passes if `expected` != `actual`\n"
"Just for minitest compatibility. :<"
msgstr ""

# Test::Unit::Assertions#assert_not_nil
msgid "Passes if ! `object` .nil?"
msgstr ""

# @example
msgid "assert_not_nil '1 two 3'.sub!(/two/, '2')"
msgstr ""

msgid ""
"Passes if ! `object` .nil?\n"
"Just for minitest compatibility. :<"
msgstr ""

# Test::Unit::Assertions#assert_no_match
# Test::Unit::Assertions#assert_not_match
msgid "Passes if `regexp` !~ `string`"
msgstr ""

# @example
msgid ""
"assert_not_match(/two/, 'one 2 three')   # -> pass\n"
"assert_not_match(/three/, 'one 2 three') # -> fail"
msgstr ""

msgid ""
"Passes if `regexp` !~ `string`\n"
"Just for minitest compatibility. :<"
msgstr ""

# Test::Unit::Assertions#assert_no_match
msgid "Deprecated. Use #assert_not_match instead."
msgstr ""

# @example
msgid ""
"assert_no_match(/two/, 'one 2 three')   # -> pass\n"
"assert_no_match(/three/, 'one 2 three') # -> fail"
msgstr ""

# @return [ThrowTagExtractor]
msgid "a new instance of ThrowTagExtractor"
msgstr ""

# Test::Unit::Assertions#assert_throw
msgid "Passes if the block throws `expected_object`"
msgstr ""

# @example
msgid ""
"assert_throw(:done) do\n"
"  throw(:done)\n"
"end"
msgstr ""

msgid ""
"Passes if the block throws `expected_object`\n"
"Just for minitest compatibility. :<"
msgstr ""

# Test::Unit::Assertions#assert_nothing_thrown
msgid "Passes if block does not throw anything."
msgstr ""

# @example
msgid ""
"assert_nothing_thrown do\n"
"  [1, 2].uniq\n"
"end"
msgstr ""

# Test::Unit::Assertions#assert_in_delta
msgid ""
"Passes if `expected_float` and `actual_float` are equal\n"
"within `delta` tolerance."
msgstr ""

# @example
msgid "assert_in_delta 0.05, (50000.0 / 10**6), 0.00001"
msgstr ""

# Test::Unit::Assertions#assert_not_in_delta
msgid ""
"Passes if `expected_float` and `actual_float` are\n"
"not equal within `delta` tolerance."
msgstr ""

# @example
msgid ""
"assert_not_in_delta(0.05, (50000.0 / 10**6), 0.00002) # -> pass\n"
"assert_not_in_delta(0.05, (50000.0 / 10**6), 0.00001) # -> fail"
msgstr ""

msgid ""
"Passes if `expected_float` and `actual_float` are\n"
"not equal within `delta` tolerance.\n"
"Just for minitest compatibility. :<"
msgstr ""

# Test::Unit::Assertions#assert_in_epsilon
msgid ""
"Passes if `expected_float` and `actual_float` are equal\n"
"within `epsilon` relative error of `expected_float`."
msgstr ""

# @example
msgid ""
"assert_in_epsilon(10000.0, 9900.0, 0.1) # -> pass\n"
"assert_in_epsilon(10000.0, 9899.0, 0.1) # -> fail"
msgstr ""

# Test::Unit::Assertions#assert_not_in_epsilon
msgid ""
"Passes if `expected_float` and `actual_float` are\n"
"not equal within `epsilon` relative error of\n"
"`expected_float`."
msgstr ""

# @example
msgid ""
"assert_not_in_epsilon(10000.0, 9900.0, 0.1) # -> fail\n"
"assert_not_in_epsilon(10000.0, 9899.0, 0.1) # -> pass"
msgstr ""

msgid ""
"Passes if `expected_float` and `actual_float` are\n"
"not equal within `epsilon` relative error of\n"
"`expected_float`.\n"
"Just for minitest compatibility. :<"
msgstr ""

# Test::Unit::Assertions#assert_send
msgid "Passes if the method send returns a true value."
msgstr ""

# Test::Unit::Assertions#assert_not_send
# Test::Unit::Assertions#assert_send
msgid ""
"`send_array` is composed of:\n"
"* A receiver\n"
"* A method\n"
"* Arguments to the method"
msgstr ""

# @example
msgid ""
"assert_send([[1, 2], :member?, 1]) # -> pass\n"
"assert_send([[1, 2], :member?, 4]) # -> fail"
msgstr ""

msgid "Passes if the method send doesn't return a true value."
msgstr ""

# @example
msgid ""
"assert_not_send([[1, 2], :member?, 1]) # -> fail\n"
"assert_not_send([[1, 2], :member?, 4]) # -> pass"
msgstr ""

# Test::Unit::Assertions#assert_boolean
msgid "Passes if `actual` is a boolean value."
msgstr ""

# @example
msgid ""
"assert_boolean(true) # -> pass\n"
"assert_boolean(nil)  # -> fail"
msgstr ""

# Test::Unit::Assertions#assert_true
msgid "Passes if `actual` is true."
msgstr ""

# @example
msgid ""
"assert_true(true)  # -> pass\n"
"assert_true(:true) # -> fail"
msgstr ""

# Test::Unit::Assertions#assert_false
msgid "Passes if `actual` is false."
msgstr ""

# @example
msgid ""
"assert_false(false)  # -> pass\n"
"assert_false(nil)    # -> fail"
msgstr ""

# Test::Unit::Assertions#assert_compare
msgid ""
"Passes if expression \"`expected` `operator`\n"
"`actual`\" is true."
msgstr ""

# @example
msgid ""
"assert_compare(1, \"<\", 10)  # -> pass\n"
"assert_compare(1, \">=\", 10) # -> fail"
msgstr ""

msgid "Passes if assertion is failed in block."
msgstr ""

# @example
msgid ""
"assert_fail_assertion {assert_equal(\"A\", \"B\")}  # -> pass\n"
"assert_fail_assertion {assert_equal(\"A\", \"A\")}  # -> fail"
msgstr ""

# Test::Unit::Assertions#assert_raise_message
msgid ""
"Passes if an exception is raised in block and its\n"
"message is `expected`."
msgstr ""

# @example
msgid ""
"assert_raise_message(\"exception\") {raise \"exception\"}  # -> pass\n"
"assert_raise_message(/exc/i) {raise \"exception\"}       # -> pass\n"
"assert_raise_message(\"exception\") {raise \"EXCEPTION\"}  # -> fail\n"
"assert_raise_message(\"exception\") {}                   # -> fail"
msgstr ""

# Test::Unit::Assertions#assert_const_defined
msgid "Passes if `object`.const_defined?(`constant_name`)"
msgstr ""

# @example
msgid ""
"assert_const_defined(Test, :Unit)          # -> pass\n"
"assert_const_defined(Object, :Nonexistent) # -> fail"
msgstr ""

# Test::Unit::Assertions#assert_not_const_defined
msgid "Passes if !`object`.const_defined?(`constant_name`)"
msgstr ""

# @example
msgid ""
"assert_not_const_defined(Object, :Nonexistent) # -> pass\n"
"assert_not_const_defined(Test, :Unit)          # -> fail"
msgstr ""

# Test::Unit::Assertions#assert_predicate
msgid "Passes if `object`.`predicate` is _true_."
msgstr ""

# @example
msgid ""
"assert_predicate([], :empty?)  # -> pass\n"
"assert_predicate([1], :empty?) # -> fail"
msgstr ""

# Test::Unit::Assertions#assert_not_predicate
msgid "Passes if `object`.`predicate` is not _true_."
msgstr ""

# @example
msgid ""
"assert_not_predicate([1], :empty?) # -> pass\n"
"assert_not_predicate([], :empty?)  # -> fail"
msgstr ""

msgid ""
"Passes if `object`.`predicate` is not _true_.\n"
"Just for minitest compatibility. :<"
msgstr ""

# Test::Unit::Assertions#assert_alias_method
msgid ""
"Passes if `object`#`alias_name` is an alias method of\n"
"`object`#`original_name`."
msgstr ""

# @example
msgid ""
"assert_alias_method([], :length, :size)  # -> pass\n"
"assert_alias_method([], :size, :length)  # -> pass\n"
"assert_alias_method([], :each, :size)    # -> fail"
msgstr ""

# Test::Unit::Assertions#assert_path_exist
msgid "Passes if `path` exists."
msgstr ""

# @example
msgid ""
"assert_path_exist(\"/tmp\")          # -> pass\n"
"assert_path_exist(\"/bin/sh\")       # -> pass\n"
"assert_path_exist(\"/nonexistent\")  # -> fail"
msgstr ""

# Test::Unit::Assertions#assert_path_not_exist
msgid "Passes if `path` doesn't exist."
msgstr ""

# @example
msgid ""
"assert_path_not_exist(\"/nonexistent\")  # -> pass\n"
"assert_path_not_exist(\"/tmp\")          # -> fail\n"
"assert_path_not_exist(\"/bin/sh\")       # -> fail"
msgstr ""

# Test::Unit::Assertions#assert_include
msgid "Passes if `collection` includes `object`."
msgstr ""

# @example
msgid ""
"assert_include([1, 10], 1)            # -> pass\n"
"assert_include(1..10, 5)              # -> pass\n"
"assert_include([1, 10], 5)            # -> fail\n"
"assert_include(1..10, 20)             # -> fail"
msgstr ""

msgid ""
"Passes if `collection` includes `object`.\n"
"Just for minitest compatibility. :<"
msgstr ""

# Test::Unit::Assertions#assert_not_include
msgid "Passes if `collection` doesn't include `object`."
msgstr ""

# @example
msgid ""
"assert_not_include([1, 10], 5)            # -> pass\n"
"assert_not_include(1..10, 20)             # -> pass\n"
"assert_not_include([1, 10], 1)            # -> fail\n"
"assert_not_include(1..10, 5)              # -> fail"
msgstr ""

msgid ""
"Passes if `collection` doesn't include `object`.\n"
"Just for minitest compatibility. :<"
msgstr ""

# Test::Unit::Assertions#assert_empty
msgid "Passes if `object` is empty."
msgstr ""

# @example
msgid ""
"assert_empty(\"\")                       # -> pass\n"
"assert_empty([])                       # -> pass\n"
"assert_empty({})                       # -> pass\n"
"assert_empty(\" \")                      # -> fail\n"
"assert_empty([nil])                    # -> fail\n"
"assert_empty({1 => 2})                 # -> fail"
msgstr ""

# Test::Unit::Assertions#assert_not_empty
msgid "Passes if `object` is not empty."
msgstr ""

# @example
msgid ""
"assert_not_empty(\" \")                      # -> pass\n"
"assert_not_empty([nil])                    # -> pass\n"
"assert_not_empty({1 => 2})                 # -> pass\n"
"assert_not_empty(\"\")                       # -> fail\n"
"assert_not_empty([])                       # -> fail\n"
"assert_not_empty({})                       # -> fail"
msgstr ""

msgid ""
"Passes if `object` is not empty.\n"
"Just for minitest compatibility. :<"
msgstr ""

msgid ""
"Builds a failure message.  `user_message` is added before the\n"
"`template` and `arguments` replaces the '?'s positionally in\n"
"the template."
msgstr ""

# Test::Unit::Assertions#add_assertion
msgid ""
"Called whenever an assertion is made. Define this in classes\n"
"that include Test::Unit::Assertions to record assertion\n"
"counts."
msgstr ""

msgid "This is a public API for developers who extend test-unit."
msgstr ""

# Test::Unit::Assertions.use_pp=
msgid ""
"Select whether or not to use the pretty-printer. If this option is set\n"
"to false before any assertions are made, pp.rb will not be required."
msgstr ""

# @param value
msgid "the value to set the attribute use_pp to."
msgstr ""

# Test::Unit::Assertions::AssertionMessage.use_pp
msgid "Returns the value of attribute use_pp"
msgstr ""

# Test::Unit::Assertions::AssertionMessage.use_pp=
msgid "Sets the attribute use_pp"
msgstr ""

msgid "Returns the value of attribute object"
msgstr ""

# @return [Inspector]
msgid "a new instance of Inspector"
msgstr ""

# @return [NumericInspector]
msgid "a new instance of NumericInspector"
msgstr ""

# @return [HashInspector]
msgid "a new instance of HashInspector"
msgstr ""

# @return [ArrayInspector]
msgid "a new instance of ArrayInspector"
msgstr ""

msgid "a new instance of Literal"
msgstr ""

# @return [DelayedLiteral]
msgid "a new instance of DelayedLiteral"
msgstr ""

msgid "a new instance of MaybeContainer"
msgstr ""

msgid "Returns the value of attribute count"
msgstr ""

# @return [Template]
msgid "a new instance of Template"
msgstr ""

# @return [AssertionMessage]
msgid "a new instance of AssertionMessage"
msgstr ""

msgid "Returns the value of attribute exception"
msgstr ""

# @return [WrappedException]
msgid "a new instance of WrappedException"
msgstr ""

# @return [AssertExceptionHelper]
msgid "a new instance of AssertExceptionHelper"
msgstr ""

# @return [AttributeMatcher]
msgid "a new instance of AttributeMatcher"
msgstr ""

# Test::Unit::Attribute::ClassMethods#attribute
msgid "Set an attribute to test methods."
msgstr ""

# @overload
msgid "tag|overload|attribute"
msgstr ""

# @example
msgid ""
"attribute :speed, :slow\n"
"def test_my_slow_method\n"
"  self[:speed] # => :slow\n"
"end"
msgstr ""

# @param [String]
msgid "tag|param|name"
msgstr ""

# @param [Object] name
msgid "the attribute name"
msgstr ""

# @param [Object] value
msgid "the attribute value"
msgstr ""

# @example
msgid ""
"def test_my_slow_method1\n"
"  self[:speed] # => :slow\n"
"end\n"
"\n"
"attribute :speed, :slow, :test_my_slow_method1, :test_my_slow_method2\n"
"\n"
"def test_my_slow_method2\n"
"  self[:speed] # => :slow\n"
"end"
msgstr ""

# @param [Array<Symbol, String>]
msgid "tag|param|method_names"
msgstr ""

# @param [Array<Symbol, String>] method_names
msgid "the test method names set the attribute"
msgstr ""

# @example
msgid ""
"attribute :speed, :slow, keep: true\n"
"def test_my_slow_method1\n"
"  self[:speed] # => :slow\n"
"end\n"
"\n"
"def test_my_slow_method2\n"
"  self[:speed] # => :slow\n"
"end"
msgstr ""

# @option
msgid "tag|option|options"
msgstr ""

# @example
msgid ""
"def test_my_slow_method1\n"
"  self[:speed] # => :slow\n"
"end\n"
"\n"
"# There are no valid options for now.\n"
"attribute :speed, :slow, {}, :test_my_slow_method1\n"
"\n"
"def test_my_slow_method2\n"
"  self[:speed] # => nil\n"
"end"
msgstr ""

# @param [Hash]
msgid "tag|param|options"
msgstr ""

# @param [Hash] options
msgid "ignored"
msgstr ""

msgid "Returns the value of attribute suite"
msgstr ""

msgid "Returns the value of attribute runner_options"
msgstr ""

# @param value
msgid "the value to set the attribute filters to."
msgstr ""

# @param value
msgid "the value to set the attribute to_run to."
msgstr ""

msgid "Returns the value of attribute filters"
msgstr ""

# Test::Unit::AutoRunner#filters=
msgid "Sets the attribute filters"
msgstr ""

msgid "Returns the value of attribute to_run"
msgstr ""

# Test::Unit::AutoRunner#to_run=
msgid "Sets the attribute to_run"
msgstr ""

# @param value
msgid "the value to set the attribute default_test_paths to."
msgstr ""

# Test::Unit::AutoRunner#default_test_paths
# Test::Unit::Collector::Load#default_test_paths
msgid "Returns the value of attribute default_test_paths"
msgstr ""

# Test::Unit::AutoRunner#default_test_paths=
msgid "Sets the attribute default_test_paths"
msgstr ""

# @param value
msgid "the value to set the attribute pattern to."
msgstr ""

# @param value
msgid "the value to set the attribute exclude to."
msgstr ""

# @param value
msgid "the value to set the attribute base to."
msgstr ""

# @param value
msgid "the value to set the attribute workdir to."
msgstr ""

msgid "Returns the value of attribute pattern"
msgstr ""

# Test::Unit::AutoRunner#pattern=
msgid "Sets the attribute pattern"
msgstr ""

msgid "Returns the value of attribute exclude"
msgstr ""

# Test::Unit::AutoRunner#exclude=
msgid "Sets the attribute exclude"
msgstr ""

msgid "Returns the value of attribute base"
msgstr ""

# Test::Unit::AutoRunner#base=
# Test::Unit::Collector::Dir#base=
msgid "Sets the attribute base"
msgstr ""

msgid "Returns the value of attribute workdir"
msgstr ""

# Test::Unit::AutoRunner#workdir=
msgid "Sets the attribute workdir"
msgstr ""

msgid "the value to set the attribute color_scheme to."
msgstr ""

# @param value
msgid "the value to set the attribute listeners to."
msgstr ""

msgid "Returns the value of attribute color_scheme"
msgstr ""

msgid "Sets the attribute color_scheme"
msgstr ""

msgid "Returns the value of attribute listeners"
msgstr ""

# Test::Unit::AutoRunner#listeners=
msgid "Sets the attribute listeners"
msgstr ""

# @param value
msgid "the value to set the attribute stop_on_failure to."
msgstr ""

# Test::Unit::AutoRunner#stop_on_failure=
msgid "Sets the attribute stop_on_failure"
msgstr ""

msgid "the value to set the attribute runner to."
msgstr ""

msgid "the value to set the attribute collector to."
msgstr ""

msgid "Sets the attribute runner"
msgstr ""

msgid "Sets the attribute collector"
msgstr ""

msgid "a new instance of AutoRunner"
msgstr ""

# @yieldparam [Test::Unit::AutoRunner]
msgid "tag|yieldparam|_self"
msgstr ""

msgid "the object that the method was called on"
msgstr ""

# @return [CodeSnippetFetcher]
msgid "a new instance of CodeSnippetFetcher"
msgstr ""

msgid "a new instance of Dir"
msgstr ""

msgid "Returns the value of attribute patterns"
msgstr ""

msgid "Returns the value of attribute excludes"
msgstr ""

msgid "a new instance of Load"
msgstr ""

# @return [ObjectSpace]
msgid "a new instance of ObjectSpace"
msgstr ""

msgid "Returns the value of attribute test_suites"
msgstr ""

msgid "a new instance of Listener"
msgstr ""

# @return [ColorScheme]
msgid "a new instance of ColorScheme"
msgstr ""

msgid "Returns the value of attribute name"
msgstr ""

# @return [Color]
msgid "a new instance of Color"
msgstr ""

msgid "Returns the value of attribute colors"
msgstr ""

# @return [MixColor]
msgid "a new instance of MixColor"
msgstr ""

# @return [DataSets]
msgid "a new instance of DataSets"
msgstr ""

msgid "This method provides Data-Driven-Test functionality."
msgstr "データ駆動テスト機能のドキュメントを追加しました。"

# Test::Unit::Data::ClassMethods#data
msgid "Define test data in the test code."
msgstr ""

# @overload
msgid "tag|overload|data"
msgstr ""

# @example
msgid "tag|example|data(label, data)"
msgstr ""

# @example data(label, data)
msgid ""
"data(\"empty string\", [true, \"\"])\n"
"data(\"plain string\", [false, \"hello\"])\n"
"def test_empty?(data)\n"
"  expected, target = data\n"
"  assert_equal(expected, target.empty?)\n"
"end"
msgstr ""

# @param [String]
msgid "tag|param|label"
msgstr ""

# @param [String] label
msgid "specify test case name."
msgstr ""

# @param
msgid "tag|param|data"
msgstr ""

# @param data
msgid "specify test data."
msgstr ""

# @param [Hash] options
msgid "specify options."
msgstr ""

# @example
msgid "tag|example|data(variable, patterns)"
msgstr ""

# @example data(variable, patterns)
msgid ""
"data(:x, [1, 2, 3])\n"
"data(:y, [\"a\", \"b\"])\n"
"def test_patterns(data)\n"
"  # 3 * 2 times executed\n"
"  # 3: the number of patterns of :x\n"
"  # 2: the number of patterns of :y\n"
"  p data\n"
"    # => {:x => 1, :y => \"a\"}\n"
"    # => {:x => 1, :y => \"b\"}\n"
"    # => {:x => 2, :y => \"a\"}\n"
"    # => {:x => 2, :y => \"b\"}\n"
"    # => {:x => 3, :y => \"a\"}\n"
"    # => {:x => 3, :y => \"b\"}\n"
"end"
msgstr ""

# @param [Symbol]
msgid "tag|param|variable"
msgstr ""

# @param [Symbol] variable
msgid "specify test pattern variable name."
msgstr ""

# @param [Array]
msgid "tag|param|patterns"
msgstr ""

# @param [Array] patterns
msgid "specify test patterns for the variable."
msgstr ""

# @example
msgid "tag|example|data(data_set)"
msgstr ""

# @example data(data_set)
msgid ""
"data(\"empty string\" => [true, \"\"],\n"
"     \"plain string\" => [false, \"hello\"])\n"
"def test_empty?(data)\n"
"  expected, target = data\n"
"  assert_equal(expected, target.empty?)\n"
"end"
msgstr ""

# @param [Hash]
msgid "tag|param|data_set"
msgstr ""

# @param [Hash] data_set
msgid ""
"specify test data as a Hash that\n"
"key is test label and value is test data."
msgstr ""

# @example
msgid "tag|example|data(&block)"
msgstr ""

# @example data(&block)
msgid ""
"data do\n"
"  data_set = {}\n"
"  data_set[\"empty string\"] = [true, \"\"]\n"
"  data_set[\"plain string\"] = [false, \"hello\"]\n"
"  data_set\n"
"end\n"
"def test_empty?(data)\n"
"  expected, target = data\n"
"  assert_equal(expected, target.empty?)\n"
"end"
msgstr ""

# @yieldreturn [Hash<String, Object>]
msgid ""
"return test data set\n"
"as a Hash that key is test label and value is test data."
msgstr ""

# @example data(&block)
msgid ""
"data do\n"
"  patterns = 3.times.to_a\n"
"  [:x, patterns]\n"
"end\n"
"data do\n"
"  patterns = []\n"
"  character = \"a\"\n"
"  2.times.each do\n"
"    patterns << character\n"
"    character = character.succ\n"
"  end\n"
"  [:y, patterns]\n"
"end\n"
"def test_patterns(data)\n"
"  # 3 * 2 times executed\n"
"  # 3: the number of patterns of :x\n"
"  # 2: the number of patterns of :y\n"
"  p data\n"
"    # => {:x => 0, :y => \"a\"}\n"
"    # => {:x => 0, :y => \"b\"}\n"
"    # => {:x => 1, :y => \"a\"}\n"
"    # => {:x => 1, :y => \"b\"}\n"
"    # => {:x => 2, :y => \"a\"}\n"
"    # => {:x => 2, :y => \"b\"}\n"
"end"
msgstr ""

# @yieldreturn [Array<Symbol, Array>]
msgid ""
"return test data set\n"
"as an Array of variable and patterns."
msgstr ""

# Test::Unit::Data::ClassMethods#data
msgid "Generates test matrix from variable and patterns pairs."
msgstr ""

# Test::Unit::Data::ClassMethods#load_data
msgid ""
"Load test data from the file. This is shorthand to load\n"
"test data from file.  If you want to load complex file, you\n"
"can use {#data} with block."
msgstr ""

msgid "tag|example|Load data from CSV file"
msgstr "CSVファイルからデータを読み込みます。"

# @example Load data from CSV file
msgid ""
"load_data(\"/path/to/test-data.csv\")\n"
"def test_empty?(data)\n"
"  assert_equal(data[\"expected\"], data[\"target\"].empty?)\n"
"end"
msgstr ""

# @param [String]
msgid "tag|param|file_name"
msgstr ""

msgid ""
"full path to test data file.\n"
"File format is automatically detected from filename extension."
msgstr "データファイルのフルパスを指定します。ファイルフォーマットはファイルの拡張子から自動的に判別します。"

msgid "if `file_name` is not supported file format."
msgstr "`file_name` がサポートされていないファイルフォーマットのときに発生します。"

# @see
msgid "tag|see|Loader#load"
msgstr ""

msgid "a new instance of Loader"
msgstr ""

msgid "Load data from file."
msgstr "ファイルからデータを読み込みます。"

# @see
msgid "tag|see|#load_csv"
msgstr ""

# @see
msgid "tag|see|#load_tsv"
msgstr ""

msgid "Load data from CSV file."
msgstr "CSVファイルからデータを読み込みます。"

msgid ""
"There are 2 types of CSV file as following examples.\n"
"First, there is a header on first row and it's first column is \"label\".\n"
"Another, there is no header in the file."
msgstr ""
"以下の2種類のサンプルのようなCSVファイルを使用できます。\n"
"一つ目は、一行目の最初のカラムが\"label\"という文字列であるものです。\n"
"もう一つは、ヘッダ行のないファイルです。"

msgid "tag|example|Load data from CSV file with header"
msgstr "ヘッダのあるCSVファイルを読み込みます"

# @example Load data from CSV file with header
msgid ""
"# test-data.csv:\n"
"#  label,expected,target\n"
"#  empty string,true,\"\"\n"
"#  plain string,false,hello\n"
"#\n"
"load_data(\"/path/to/test-data.csv\")\n"
"def test_empty?(data)\n"
"  assert_equal(data[\"expected\"], data[\"target\"].empty?)\n"
"end"
msgstr ""

msgid "tag|example|Load data from CSV file without header"
msgstr "ヘッダのないCSVファイルを読み込みます"

# @example Load data from CSV file without header
msgid ""
"# test-data-without-header.csv:\n"
"#  empty string,true,\"\"\n"
"#  plain string,false,hello\n"
"#\n"
"load_data(\"/path/to/test-data-without-header.csv\")\n"
"def test_empty?(data)\n"
"  expected, target = data\n"
"  assert_equal(expected, target.empty?)\n"
"end"
msgstr ""

msgid "Load data from TSV file."
msgstr "TSVファイルからデータを読み込みます。"

msgid ""
"There are 2 types of TSV file as following examples.\n"
"First, there is a header on first row and it's first column is \"label\".\n"
"Another, there is no header in the file."
msgstr ""
"以下の2種類のサンプルのようなTSVファイルを使用できます。\n"
"一つ目は、一行目の最初のカラムが\"label\"という文字列であるものです。\n"
"もう一つは、ヘッダ行のないファイルです。"

msgid "tag|example|Load data from TSV file with header"
msgstr "ヘッダのあるTSVファイルを読み込みます"

# @example Load data from TSV file with header
msgid ""
"# test-data.tsv:\n"
"#  label\texpected\ttarget\n"
"#  empty string\ttrue\t\"\"\n"
"#  plain string\tfalse\thello\n"
"#\n"
"load_data(\"/path/to/test-data.tsv\")\n"
"def test_empty?(data)\n"
"  assert_equal(data[\"expected\"], data[\"target\"].empty?)\n"
"end"
msgstr ""

msgid "tag|example|Load data from TSV file without header"
msgstr "ヘッダのないTSVファイルを読み込みます"

# @example Load data from TSV file without header
msgid ""
"# test-data-without-header.tsv:\n"
"#  empty string\ttrue\t\"\"\n"
"#  plain string\tfalse\thello\n"
"#\n"
"load_data(\"/path/to/test-data-without-header.tsv\")\n"
"def test_empty?(data)\n"
"  expected, target = data\n"
"  assert_equal(expected, target.empty?)\n"
"end"
msgstr ""

# @return [SequenceMatcher]
msgid "a new instance of SequenceMatcher"
msgstr ""

msgid "a new instance of Differ"
msgstr ""

# Test::Unit::Diff::UTF8Line::WIDE_CHARACTERS
msgid "from http://unicode.org/reports/tr11/"
msgstr ""

# @return [UTF8Line]
msgid "a new instance of UTF8Line"
msgstr ""

# Test::Unit::Error
msgid ""
"Encapsulates an error in a test. Created by\n"
"Test::Unit::TestCase when it rescues an exception thrown\n"
"during the processing of a test."
msgstr ""

msgid "Returns the value of attribute test_name"
msgstr ""

msgid "Returns the value of attribute method_name"
msgstr ""

# Test::Unit::Error#initialize
msgid ""
"Creates a new Error with the given test_name and\n"
"exception."
msgstr ""

msgid "a new instance of Error"
msgstr ""

msgid "Returns a single character representation of an error."
msgstr ""

msgid "Returns the message associated with the error."
msgstr ""

msgid "Returns a brief version of the error description."
msgstr ""

msgid "Returns a verbose version of the error description."
msgstr ""

# Test::Unit::Error#backtrace
msgid "Deprecated"
msgstr ""

msgid "Overridden to return long_display."
msgstr ""

msgid "Returns the value of attribute errors"
msgstr ""

msgid "Records a Test::Unit::Error."
msgstr ""

# Test::Unit::TestResultErrorSupport#error_count
msgid ""
"Returns the number of errors this TestResult has\n"
"recorded."
msgstr ""

# @overload
msgid "tag|overload|exception_handler"
msgstr ""

# @param [Symbol]
msgid "tag|param|method_name"
msgstr ""

# @param [Symbol] method_name
msgid "The method name that handles exception raised in tests."
msgstr ""

# @yield [test, exception]
msgid "Gives the test and the exception."
msgstr ""

# @yieldparam [Test::Unit::TestCase]
msgid "tag|yieldparam|test"
msgstr ""

# @yieldparam [Test::Unit::TestCase] test
msgid "The test where the exception is raised."
msgstr ""

# @yieldparam [Exception]
msgid "tag|yieldparam|exception"
msgstr ""

# @yieldparam [Exception] exception
msgid "The exception that is raised in running the test."
msgstr ""

# @yieldreturn [Boolean]
msgid ""
"Whether the handler handles the exception or not.\n"
"The handler must return _true_ if the handler handles\n"
"test exception, _false_ otherwise."
msgstr ""

# Test::Unit::ExceptionHandler::ClassMethods#exception_handler
msgid "Add an exception handler method."
msgstr ""

# Test::Unit::ExceptionHandler::ClassMethods#exception_handler
msgid "Add an exception handler."
msgstr ""

# Test::Unit::Failure
msgid ""
"Encapsulates a test failure. Created by Test::Unit::TestCase\n"
"when an assertion fails."
msgstr ""

msgid "Returns the value of attribute location"
msgstr ""

msgid "Returns the value of attribute message"
msgstr ""

msgid "Returns the value of attribute source_location"
msgstr ""

# Test::Unit::Failure#initialize
msgid ""
"Creates a new Failure with the given location and\n"
"message."
msgstr ""

msgid "a new instance of Failure"
msgstr ""

msgid "Returns a single character representation of a failure."
msgstr ""

msgid "Report a failure."
msgstr ""

msgid "The description about the failure."
msgstr ""

# @param [Array<String>]
msgid "tag|param|backtrace"
msgstr ""

msgid "The backtrace for the failure."
msgstr ""

msgid "a customizable set of options"
msgstr ""

msgid "Returns the value of attribute failures"
msgstr ""

msgid "Records a Test::Unit::Failure."
msgstr ""

# Test::Unit::TestResultFailureSupport#failure_count
msgid ""
"Returns the number of failures this TestResult has\n"
"recorded."
msgstr ""

# @return [FaultLocationDetector]
msgid "a new instance of FaultLocationDetector"
msgstr ""

# Test::Unit::Fixture::Fixture#setup
msgid "Returns the value of attribute setup"
msgstr ""

# Test::Unit::Fixture::Fixture#cleanup
msgid "Returns the value of attribute cleanup"
msgstr ""

# Test::Unit::Fixture::Fixture#teardown
msgid "Returns the value of attribute teardown"
msgstr ""

# @return [Fixture]
msgid "a new instance of Fixture"
msgstr ""

# @return [HookPoint]
msgid "a new instance of HookPoint"
msgstr ""

# Test::Unit::Notification#initialize
msgid ""
"Creates a new Notification with the given location and\n"
"message."
msgstr ""

# @return [Notification]
msgid "a new instance of Notification"
msgstr ""

msgid "Returns a single character representation of a notification."
msgstr ""

msgid "Notify some information."
msgstr ""

# Test::Unit::TestCase
msgid "Example:"
msgstr ""

# Test::Unit::TestCaseNotificationSupport#notify
msgid ""
"    def test_notification\n"
"      notify(\"I'm here!\")\n"
"      # Reached here\n"
"      notify(\"Special!\") if special_case?\n"
"      # Reached here too\n"
"    end"
msgstr ""

# Test::Unit::TestCaseNotificationSupport#notify
msgid "options:"
msgstr ""

# Test::Unit::TestCaseNotificationSupport#notify
msgid "    :backtrace override backtrace."
msgstr ""

msgid "Returns the value of attribute notifications"
msgstr ""

msgid "Records a Test::Unit::Notification."
msgstr ""

# Test::Unit::TestResultNotificationSupport#notification_count
msgid ""
"Returns the number of notifications this TestResult has\n"
"recorded."
msgstr ""

# Test::Unit::Omission#initialize
msgid ""
"Creates a new Omission with the given location and\n"
"message."
msgstr ""

# @return [Omission]
msgid "a new instance of Omission"
msgstr ""

msgid "Returns a single character representation of a omission."
msgstr ""

msgid "Omit the test or part of the test."
msgstr ""

# Test::Unit::TestCaseOmissionSupport#omit
msgid ""
"    def test_omission\n"
"      omit\n"
"      # Not reached here\n"
"    end"
msgstr ""

# Test::Unit::TestCaseOmissionSupport#omit
msgid ""
"    def test_omission_with_here\n"
"      omit do\n"
"        # Not ran here\n"
"      end\n"
"      # Reached here\n"
"    end"
msgstr ""

# Test::Unit::TestCaseOmissionSupport#omit_if
msgid ""
"Omit the test or part of the test if _condition_ is\n"
"true."
msgstr ""

# Test::Unit::TestCaseOmissionSupport#omit_if
msgid ""
"    def test_omission\n"
"      omit_if(\"\".empty?)\n"
"      # Not reached here\n"
"    end"
msgstr ""

# Test::Unit::TestCaseOmissionSupport#omit_if
msgid ""
"    def test_omission_with_here\n"
"      omit_if(true) do\n"
"        # Not ran here\n"
"      end\n"
"      omit_if(false) do\n"
"        # Reached here\n"
"      end\n"
"      # Reached here too\n"
"    end"
msgstr ""

# Test::Unit::TestCaseOmissionSupport#omit_unless
msgid ""
"Omit the test or part of the test if _condition_ is\n"
"not true."
msgstr ""

# Test::Unit::TestCaseOmissionSupport#omit_unless
msgid ""
"    def test_omission\n"
"      omit_unless(\"string\".empty?)\n"
"      # Not reached here\n"
"    end"
msgstr ""

# Test::Unit::TestCaseOmissionSupport#omit_unless
msgid ""
"    def test_omission_with_here\n"
"      omit_unless(true) do\n"
"        # Reached here\n"
"      end\n"
"      omit_unless(false) do\n"
"        # Not ran here\n"
"      end\n"
"      # Reached here too\n"
"    end"
msgstr ""

msgid "Returns the value of attribute omissions"
msgstr ""

msgid "Records a Test::Unit::Omission."
msgstr ""

# Test::Unit::TestResultOmissionSupport#omission_count
msgid ""
"Returns the number of omissions this TestResult has\n"
"recorded."
msgstr ""

# Test::Unit::Pending#initialize
msgid ""
"Creates a new Pending with the given location and\n"
"message."
msgstr ""

msgid "a new instance of Pending"
msgstr ""

msgid "Returns a single character representation of a pending."
msgstr ""

msgid "Marks the test or part of the test is pending."
msgstr ""

# Test::Unit::TestCasePendingSupport#pend
msgid ""
"    def test_pending\n"
"      pend\n"
"      # Not reached here\n"
"    end"
msgstr ""

# Test::Unit::TestCasePendingSupport#pend
msgid ""
"    def test_pending_with_here\n"
"      pend do\n"
"        # Ran here\n"
"        # Fails if the block doesn't raise any error.\n"
"        # Because it means the block is passed unexpectedly.\n"
"      end\n"
"      # Reached here\n"
"    end"
msgstr ""

msgid "Returns the value of attribute pendings"
msgstr ""

msgid "Records a Test::Unit::Pending."
msgstr ""

# Test::Unit::TestResultPendingSupport#pending_count
msgid ""
"Returns the number of pendings this TestResult has\n"
"recorded."
msgstr ""

msgid "Returns the value of attribute test"
msgstr ""

# @return [Checker]
msgid "a new instance of Checker"
msgstr ""

# @return [TestSuiteCreator]
msgid "a new instance of TestSuiteCreator"
msgstr ""

# Test::Unit::TestCase
msgid ""
"Ties everything together. If you subclass and add your own\n"
"test methods, it takes care of making them into tests and\n"
"wrapping those tests into a suite. It also does the\n"
"nitty-gritty of actually running an individual test and\n"
"collecting its results into a Test::Unit::TestResult object."
msgstr ""

msgid "You can run two hooks before/after a TestCase run."
msgstr ""

# Test::Unit::TestCase
msgid ""
"    class TestMyClass < Test::Unit::TestCase\n"
"      class << self\n"
"        def startup\n"
"          ...\n"
"        end"
msgstr ""

# Test::Unit::TestCase
msgid ""
"        def shutdown\n"
"          ...\n"
"        end\n"
"      end"
msgstr ""

# Test::Unit::TestCase
msgid ""
"      def setup\n"
"        ...\n"
"      end"
msgstr ""

# Test::Unit::TestCase
msgid ""
"      def cleanup\n"
"        ...\n"
"      end"
msgstr ""

# Test::Unit::TestCase
msgid ""
"      def teardown\n"
"        ...\n"
"      end"
msgstr ""

# Test::Unit::TestCase
msgid ""
"      def test_my_method1\n"
"        ...\n"
"      end"
msgstr ""

# Test::Unit::TestCase
msgid ""
"      def test_my_method2\n"
"        ...\n"
"      end\n"
"    end"
msgstr ""

# Test::Unit::TestCase
msgid ""
"1. startup\n"
"1. setup\n"
"1. test_my_method1\n"
"1. cleanup\n"
"1. teardown\n"
"1. setup\n"
"1. test_my_method2\n"
"1. cleanup\n"
"1. teardown\n"
"1. shutdown"
msgstr ""

# Test::Unit::TestCase
msgid "You can set an attribute to each test."
msgstr ""

# Test::Unit::TestCase
msgid ""
"    class TestMyClass < Test::Unit::TestCase\n"
"      attribute :speed, :fast\n"
"      def test_my_fast_method\n"
"        # You can get the attribute via `self[]`\n"
"        self[:speed] # => :fast\n"
"        ...\n"
"      end"
msgstr ""

# Test::Unit::TestCase
msgid ""
"      attribute :speed, :slow\n"
"      def test_my_slow_method\n"
"        self[:speed] # => :slow\n"
"        ...\n"
"      end\n"
"    end"
msgstr ""

# Test::Unit::TestCase.suite
msgid ""
"Rolls up all of the test* methods in the fixture into\n"
"one suite, creating a new instance of the fixture for\n"
"each method."
msgstr ""

# Test::Unit::TestCase.startup
msgid ""
"Called before every test case runs. Can be used\n"
"to set up fixture information used in test case\n"
"scope."
msgstr ""

# Test::Unit::TestCase.startup
msgid ""
"    class TestMyClass < Test::Unit::TestCase\n"
"      class << self\n"
"        def startup\n"
"          ...\n"
"        end\n"
"      end"
msgstr ""

# Test::Unit::TestCase.shutdown
# Test::Unit::TestCase.startup
msgid ""
"      def test_my_class1\n"
"        ...\n"
"      end"
msgstr ""

# Test::Unit::TestCase.shutdown
# Test::Unit::TestCase.startup
msgid ""
"      def test_my_class2\n"
"        ...\n"
"      end\n"
"    end"
msgstr ""

# Test::Unit::TestCase.startup
msgid ""
"* startup\n"
"* setup\n"
"* test_my_class1 (or test_my_class2)\n"
"* setup\n"
"* test_my_class2 (or test_my_class1)"
msgstr ""

# Test::Unit::TestCase.shutdown
# Test::Unit::TestCase.startup
msgid ""
"Note that you should not assume test order. Tests\n"
"should be worked in any order."
msgstr ""

# Test::Unit::TestCase.shutdown
msgid ""
"Called after every test case runs. Can be used to tear\n"
"down fixture information used in test case scope."
msgstr ""

# Test::Unit::TestCase.shutdown
msgid ""
"    class TestMyClass < Test::Unit::TestCase\n"
"      class << self\n"
"        def shutdown\n"
"          ...\n"
"        end\n"
"      end"
msgstr ""

# Test::Unit::TestCase.shutdown
msgid ""
"* test_my_class1 (or test_my_class2)\n"
"* teardown\n"
"* test_my_class2 (or test_my_class1)\n"
"* teardown\n"
"* shutdown"
msgstr ""

# Test::Unit::TestCase.test_order
msgid ""
"Returns the current test order. This returns\n"
"`:alphabetic` by default."
msgstr ""

msgid "Sets the current test order."
msgstr ""

# Test::Unit::TestCase.test_order=
msgid "Here are the available _order_:"
msgstr ""

# Test::Unit::TestCase.test_order=
msgid ""
":alphabetic\n"
": Default. Tests are sorted in alphabetic order."
msgstr ""

# Test::Unit::TestCase.test_order=
msgid ""
":random\n"
": Tests are sorted in random order."
msgstr ""

# Test::Unit::TestCase.test_order=
msgid ""
":defined\n"
": Tests are sorted in defined order."
msgstr ""

# Test::Unit::TestCase.test
msgid ""
"Defines a test in declarative syntax or marks\n"
"following method as a test method."
msgstr ""

# Test::Unit::TestCase.test
msgid ""
"In declarative syntax usage, the following two\n"
"test definitions are the almost same:"
msgstr ""

# Test::Unit::TestCase.test
msgid ""
"    description \"register user\"\n"
"    def test_register_user\n"
"      ...\n"
"    end"
msgstr ""

# Test::Unit::TestCase.test
msgid ""
"    test \"register user\" do\n"
"      ...\n"
"    end"
msgstr ""

# Test::Unit::TestCase.test
msgid ""
"In test method mark usage, the \"my_test_method\" is\n"
"treated as a test method:"
msgstr ""

# Test::Unit::TestCase.test
msgid ""
"    test\n"
"    def my_test_method\n"
"      assert_equal(\"call me\", ...)\n"
"    end"
msgstr ""

msgid "Describes a test."
msgstr ""

# Test::Unit::TestCase.description
msgid ""
"The following example associates \"register a\n"
"normal user\" description with \"test_register\"\n"
"test."
msgstr ""

# Test::Unit::TestCase.description
msgid ""
"    description \"register a normal user\"\n"
"    def test_register\n"
"      ...\n"
"    end"
msgstr ""

msgid "Defines a sub test case."
msgstr ""

# Test::Unit::TestCase.sub_test_case
msgid ""
"This is a syntax sugar. The both of the following codes are\n"
"the same in meaning:"
msgstr ""

# Test::Unit::TestCase.sub_test_case
msgid "Standard:"
msgstr ""

# Test::Unit::TestCase.sub_test_case
msgid ""
"    class TestParent < Test::Unit::TestCase\n"
"      class TestChild < self\n"
"        def test_in_child\n"
"        end\n"
"      end\n"
"    end"
msgstr ""

# Test::Unit::TestCase.sub_test_case
msgid "Syntax sugar:"
msgstr ""

# Test::Unit::TestCase.sub_test_case
msgid ""
"    class TestParent < Test::Unit::TestCase\n"
"      sub_test_case(\"TestChild\") do\n"
"        def test_in_child\n"
"        end\n"
"      end\n"
"    end"
msgstr ""

# Test::Unit::TestCase.sub_test_case
msgid "The difference of them are the following:"
msgstr ""

# Test::Unit::TestCase.sub_test_case
msgid ""
"* Test case created by {sub_test_case} is an anonymous class.\n"
"  So you can't refer the test case by name.\n"
"* The class name of class style must follow\n"
"  constant naming rule in Ruby. But the name of test case\n"
"  created by {sub_test_case} doesn't need to follow the rule.\n"
"  For example, you can use a space in name such as \"child test\"."
msgstr ""

msgid "The name of newly created sub test case."
msgstr ""

msgid "Created sub test case class."
msgstr ""

# @yield
msgid ""
"The block is evaluated under the newly created sub test\n"
"case class context."
msgstr ""

# @option
msgid "tag|option|query"
msgstr ""

# @param [Hash]
msgid "tag|param|query"
msgstr ""

# Test::Unit::TestCase.test_defined?
msgid ""
"Checks whether a test that is matched the query is\n"
"defined."
msgstr ""

msgid "a new instance of TestCase"
msgstr ""

# Test::Unit::TestCase#initialize
msgid ""
"Creates a new instance of the fixture for running the\n"
"test represented by test_method_name."
msgstr ""

msgid "Assigns test data to the test. It is used in internal."
msgstr ""

msgid "Returns the test is valid test. It is used in internal."
msgstr ""

# Test::Unit::TestCase#run
msgid ""
"Runs the individual test method represented by this\n"
"instance of the fixture, collecting statistics, failures\n"
"and errors in result."
msgstr ""

# Test::Unit::TestCase#setup
msgid ""
"Called before every test method runs. Can be used\n"
"to set up fixture information."
msgstr ""

# Test::Unit::TestCase#setup
msgid ""
"You can add additional setup tasks by the following\n"
"code:"
msgstr ""

# Test::Unit::TestCase#setup
msgid ""
"    class TestMyClass < Test::Unit::TestCase\n"
"      def setup\n"
"        ...\n"
"      end"
msgstr ""

# Test::Unit::TestCase#setup
msgid ""
"      setup\n"
"      def my_setup1\n"
"        ...\n"
"      end"
msgstr ""

# Test::Unit::TestCase#setup
msgid ""
"      setup do\n"
"        ... # setup callback1\n"
"      end"
msgstr ""

# Test::Unit::TestCase#setup
msgid ""
"      setup\n"
"      def my_setup2\n"
"        ...\n"
"      end"
msgstr ""

# Test::Unit::TestCase#setup
msgid ""
"      setup do\n"
"        ... # setup callback2\n"
"      end"
msgstr ""

# Test::Unit::TestCase#cleanup
# Test::Unit::TestCase#setup
# Test::Unit::TestCase#teardown
msgid ""
"      def test_my_class\n"
"        ...\n"
"      end\n"
"    end"
msgstr ""

# Test::Unit::TestCase#setup
msgid ""
"* setup\n"
"* my_setup1\n"
"* setup callback1\n"
"* my_setup2\n"
"* setup callback2\n"
"* test_my_class"
msgstr ""

# Test::Unit::TestCase#cleanup
msgid ""
"Called after every test method runs but the test\n"
"method isn't marked as 'passed'. Can be used to\n"
"clean up and/or verify tested condition.\n"
"e.g. Can be used to verify mock."
msgstr ""

# Test::Unit::TestCase#cleanup
msgid ""
"You can add additional cleanup tasks by the following\n"
"code:"
msgstr ""

# Test::Unit::TestCase#cleanup
msgid ""
"    class TestMyClass < Test::Unit::TestCase\n"
"      def cleanup\n"
"        ...\n"
"      end"
msgstr ""

# Test::Unit::TestCase#cleanup
msgid ""
"      cleanup\n"
"      def my_cleanup1\n"
"        ...\n"
"      end"
msgstr ""

# Test::Unit::TestCase#cleanup
msgid ""
"      cleanup do\n"
"        ... # cleanup callback1\n"
"      end"
msgstr ""

# Test::Unit::TestCase#cleanup
msgid ""
"      cleanup\n"
"      def my_cleanup2\n"
"        ...\n"
"      end"
msgstr ""

# Test::Unit::TestCase#cleanup
msgid ""
"      cleanup do\n"
"        ... # cleanup callback2\n"
"      end"
msgstr ""

# Test::Unit::TestCase#cleanup
msgid ""
"* test_my_class\n"
"* cleanup callback2\n"
"* my_cleanup2\n"
"* cleanup callback1\n"
"* my_cleanup1\n"
"* cleanup"
msgstr ""

# Test::Unit::TestCase#teardown
msgid ""
"Called after every test method runs. Can be used to tear\n"
"down fixture information."
msgstr ""

# Test::Unit::TestCase#teardown
msgid ""
"You can add additional teardown tasks by the following\n"
"code:"
msgstr ""

# Test::Unit::TestCase#teardown
msgid ""
"    class TestMyClass < Test::Unit::TestCase\n"
"      def teardown\n"
"        ...\n"
"      end"
msgstr ""

# Test::Unit::TestCase#teardown
msgid ""
"      teardown\n"
"      def my_teardown1\n"
"        ...\n"
"      end"
msgstr ""

# Test::Unit::TestCase#teardown
msgid ""
"      teardown do\n"
"        ... # teardown callback1\n"
"      end"
msgstr ""

# Test::Unit::TestCase#teardown
msgid ""
"      teardown\n"
"      def my_teardown2\n"
"        ...\n"
"      end"
msgstr ""

# Test::Unit::TestCase#teardown
msgid ""
"      teardown do\n"
"        ... # teardown callback2\n"
"      end"
msgstr ""

# Test::Unit::TestCase#teardown
msgid ""
"* test_my_class\n"
"* teardown callback2\n"
"* my_teardown2\n"
"* teardown callback1\n"
"* my_teardown1\n"
"* teardown"
msgstr ""

# Test::Unit::TestCase#data_label
msgid ""
"Returns a label of test data for the test. If the\n"
"test isn't associated with any test data, it returns\n"
"`nil`."
msgstr ""

# Test::Unit::TestCase#data
msgid ""
"Returns test data for the test. If the test isn't associated\n"
"with any test data, it returns `nil`."
msgstr ""

# Test::Unit::TestCase#name
msgid ""
"Returns a human-readable name for the specific test that\n"
"this instance of TestCase represents."
msgstr ""

# Test::Unit::TestCase#local_name
msgid ""
"Returns a human-readable name for the specific test that this\n"
"instance of TestCase represents."
msgstr ""

# Test::Unit::TestCase#local_name
msgid ""
"`#local_name` doesn't include class name. `#name` includes\n"
"class name."
msgstr ""

# Test::Unit::TestCase#description
msgid ""
"Returns a description for the test. A description\n"
"will be associated by Test::Unit::TestCase.test or\n"
"Test::Unit::TestCase.description."
msgstr ""

msgid "Returns a name for the test for no description test."
msgstr ""

msgid "Overridden to return #name."
msgstr ""

msgid "It's handy to be able to compare TestCase instances."
msgstr ""

msgid "Returns a Time at the test was started."
msgstr ""

msgid "Returns elapsed time for the test was ran."
msgstr ""

msgid "Returns whether the test is interrupted."
msgstr ""

# Test::Unit::TestCase#passed?
msgid ""
"Returns whether this individual test passed or\n"
"not. Primarily for use in teardown so that artifacts\n"
"can be left behind if the test fails."
msgstr ""

# Test::Unit::TestCase#problem_occurred
msgid ""
"Notify that a problem is occurred in the test. It means that\n"
"the test is a failed test. If any failed tests exist in test\n"
"suites, the test process exits with failure exit status."
msgstr ""

# Test::Unit::TestCase#add_pass
msgid ""
"Notify that the test is passed. Normally, it is not needed\n"
"because #run calls it automatically. If you want to override\n"
"#run, it is not a good idea. Please contact test-unit\n"
"developers. We will help you without your custom #run. For\n"
"example, we may add a new hook in #run."
msgstr ""

msgid "Returns the value of attribute start_time"
msgstr ""

msgid "Returns the value of attribute elapsed_time"
msgstr ""

# Test::Unit::TestCase::InternalData#test_data_label
msgid "Returns the value of attribute test_data_label"
msgstr ""

# Test::Unit::TestCase::InternalData#test_data
msgid "Returns the value of attribute test_data"
msgstr ""

# @return [InternalData]
msgid "a new instance of InternalData"
msgstr ""

# Test::Unit::TestResult
msgid ""
"Collects Test::Unit::Failure and Test::Unit::Error so that\n"
"they can be displayed to the user. To this end, observers\n"
"can be added to it, allowing the dynamic updating of, say, a\n"
"UI."
msgstr ""

msgid "Returns the value of attribute run_count"
msgstr ""

msgid "Returns the value of attribute pass_count"
msgstr ""

msgid "Returns the value of attribute assertion_count"
msgstr ""

msgid "Returns the value of attribute faults"
msgstr ""

# @param value
msgid "the value to set the attribute stop_tag to."
msgstr ""

# Test::Unit::TestResult#stop_tag
msgid "Returns the value of attribute stop_tag"
msgstr ""

# Test::Unit::TestResult#stop_tag=
msgid "Sets the attribute stop_tag"
msgstr ""

msgid "Constructs a new, empty TestResult."
msgstr ""

# @return [TestResult]
msgid "a new instance of TestResult"
msgstr ""

msgid "Records a test run."
msgstr ""

msgid "Records an individual assertion."
msgstr ""

# Test::Unit::TestResult#summary
msgid ""
"Returns a string contain the recorded runs, assertions,\n"
"failures and errors in this TestResult."
msgstr ""

msgid "Returnes a string that shows result status."
msgstr ""

# Test::Unit::TestResult#passed?
msgid ""
"Returns whether or not this TestResult represents\n"
"successful completion."
msgstr ""

msgid "A collection of tests which can be #run."
msgstr ""

# Test::Unit::TestSuite
msgid ""
"Note: It is easy to confuse a TestSuite instance with\n"
"something that has a static suite method; I know because _I_\n"
"have trouble keeping them straight. Think of something that\n"
"has a suite method as simply providing a way to get a\n"
"meaningful TestSuite instance."
msgstr ""

msgid "Returns the value of attribute tests"
msgstr ""

msgid "Returns the value of attribute test_case"
msgstr ""

# Test::Unit::TestSuite#priority
# Test::Unit::TestSuite#priority=
msgid ""
"Test suite that has higher priority is ran prior to\n"
"test suites that have lower priority."
msgstr ""

msgid "Creates a new TestSuite with the given name."
msgstr ""

# @return [TestSuite]
msgid "a new instance of TestSuite"
msgstr ""

# Test::Unit::TestSuite#run
msgid ""
"Runs the tests and/or suites contained in this\n"
"TestSuite."
msgstr ""

msgid "Adds the test to the suite."
msgstr ""

# Test::Unit::TestSuite#size
msgid ""
"Returns the rolled up number of tests in this suite;\n"
"i.e. if the suite contains other suites, it counts the\n"
"tests within those suites, not the suites themselves."
msgstr ""

# Test::Unit::TestSuite#to_s
msgid ""
"Overridden to return the name given the suite at\n"
"creation."
msgstr ""

msgid "It's handy to be able to compare TestSuite instances."
msgstr ""

msgid "Runs a Test::Unit::TestSuite on the console."
msgstr ""

# Test::Unit::UI::Console::TestRunner#initialize
msgid ""
"Creates a new TestRunner for running the passed\n"
"suite. If quiet_mode is true, the output while\n"
"running is limited to progress dots, errors and\n"
"failures, and the final result. io specifies\n"
"where runner output should go to; defaults to\n"
"STDOUT."
msgstr ""

msgid "a new instance of TestRunner"
msgstr ""

# @return [ColorizedReadableDiffer]
msgid "a new instance of ColorizedReadableDiffer"
msgstr ""

msgid "Begins the test run."
msgstr ""

# Test::Unit::UI::TestRunnerMediator
msgid ""
"Provides an interface to write any given UI against,\n"
"hopefully making it easy to write new UIs."
msgstr ""

# Test::Unit::UI::TestRunnerMediator#initialize
msgid ""
"Creates a new TestRunnerMediator initialized to run\n"
"the passed suite."
msgstr ""

# @return [TestRunnerMediator]
msgid "a new instance of TestRunnerMediator"
msgstr ""

# Test::Unit::UI::TestRunnerMediator#run
msgid ""
"Runs the suite the TestRunnerMediator was created\n"
"with."
msgstr ""

# Test::Unit::UI::TestRunnerMediator#run_suite
msgid ""
"Just for backward compatibility for NetBeans.\n"
"NetBeans should not use monkey patching. NetBeans\n"
"should use runner change public API."
msgstr ""

# Test::Unit::UI::TestRunnerMediator#run_suite
msgid ""
"See GitHub#38\n"
"  https://github.com/test-unit/test-unit/issues/38"
msgstr ""

# Test::Unit::UI::TestRunnerMediator#create_result
msgid ""
"A factory method to create the result the mediator\n"
"should run with. Can be overridden by subclasses if\n"
"one wants to use a different result."
msgstr ""

# Test::Unit::UI::TestRunnerUtilities
msgid ""
"Provides some utilities common to most, if not all,\n"
"TestRunners."
msgstr ""

msgid "--"
msgstr ""

# Test::Unit::UI::TestRunnerUtilities
msgid ""
"Perhaps there ought to be a TestRunner superclass? There\n"
"seems to be a decent amount of shared code between test\n"
"runners."
msgstr ""

msgid "Creates a new TestRunner and runs the suite."
msgstr ""

# Test::Unit::UI::TestRunnerUtilities#start_command_line_test
msgid ""
"Takes care of the ARGV parsing and suite\n"
"determination necessary for running one of the\n"
"TestRunners from the command line."
msgstr ""

msgid "Runs a Test::Unit::TestSuite and outputs XML."
msgstr ""

# Test::Unit::UI::XML::TestRunner#initialize
msgid ""
"Creates a new TestRunner for running the passed\n"
"suite. :output option specifies where runner\n"
"output should go to; defaults to STDOUT."
msgstr ""

# Test::Unit::Util::Observable
msgid ""
"This is a utility class that allows anything mixing\n"
"it in to notify a set of listeners about interesting\n"
"events."
msgstr ""

msgid "We use this for defaults since nil might mean something"
msgstr ""

# Test::Unit::Util::Observable#add_listener
msgid ""
"Adds the passed proc as a listener on the\n"
"channel indicated by channel_name. listener_key\n"
"is used to remove the listener later; if none is\n"
"specified, the proc itself is used."
msgstr ""

# Test::Unit::Util::Observable#add_listener
msgid ""
"Whatever is used as the listener_key is\n"
"returned, making it very easy to use the proc\n"
"itself as the listener_key:"
msgstr ""

# Test::Unit::Util::Observable#add_listener
msgid ""
"    listener = add_listener(\"Channel\") { ... }\n"
"    remove_listener(\"Channel\", listener)"
msgstr ""

# Test::Unit::Util::Observable#remove_listener
msgid ""
"Removes the listener indicated by listener_key\n"
"from the channel indicated by\n"
"channel_name. Returns the registered proc, or\n"
"nil if none was found."
msgstr ""

# Test::Unit::Util::Observable#notify_listeners
msgid ""
"Calls all the procs registered on the channel\n"
"indicated by channel_name. If value is\n"
"specified, it is passed in to the procs,\n"
"otherwise they are called with no arguments."
msgstr ""

# Test::Unit::Util::Observable#notify_listeners
msgid ""
"Perhaps this should be private? Would it ever\n"
"make sense for an external class to call this\n"
"method directly?"
msgstr ""

# Test::Unit::Util::Output#capture_output
msgid ""
"Returns output for standard output and standard\n"
"error as string."
msgstr ""

# Test::Unit::Util::Output#capture_output
msgid ""
"    capture_output do\n"
"      puts(\"stdout\")\n"
"      warn(\"stderr\")\n"
"    end # -> [\"stdout\n"
"\", \"stderr\n"
"\"]"
msgstr ""

# Test::Unit::Util::ProcWrapper
msgid ""
"Allows the storage of a Proc passed through '&' in a\n"
"hash."
msgstr ""

# Test::Unit::Util::ProcWrapper
msgid ""
"Note: this may be inefficient, since the hash being\n"
"used is not necessarily very good. In Observable,\n"
"efficiency is not too important, since the hash is\n"
"only accessed when adding and removing listeners,\n"
"not when notifying."
msgstr ""

msgid "Creates a new wrapper for a_proc."
msgstr ""

msgid "a new instance of ProcWrapper"
msgstr ""
